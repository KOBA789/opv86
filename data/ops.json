[
 {
  "opcode": "37",
  "instr": "AAA",
  "op_en": "ZO",
  "valid_in_64": "Invalid",
  "compat_legacy": "Valid",
  "description": "ASCII adjust AL after addition.",
  "page": 120
 },
 {
  "opcode": "D5 0A",
  "instr": "AAD",
  "op_en": "ZO",
  "valid_in_64": "Invalid",
  "compat_legacy": "Valid",
  "description": "ASCII adjust AX before division.",
  "page": 122
 },
 {
  "opcode": "D5 ib",
  "instr": "AAD imm8",
  "op_en": "ZO",
  "valid_in_64": "Invalid",
  "compat_legacy": "Valid",
  "description": "Adjust AX before division to number base imm8.",
  "page": 122
 },
 {
  "opcode": "D4 0A",
  "instr": "AAM",
  "op_en": "ZO",
  "valid_in_64": "Invalid",
  "compat_legacy": "Valid",
  "description": "ASCII adjust AX after multiply.",
  "page": 124
 },
 {
  "opcode": "D4 ib",
  "instr": "AAM imm8",
  "op_en": "ZO",
  "valid_in_64": "Invalid",
  "compat_legacy": "Valid",
  "description": "Adjust AX after multiply to number base imm8.",
  "page": 124
 },
 {
  "opcode": "3F",
  "instr": "AAS",
  "op_en": "ZO",
  "valid_in_64": "Invalid",
  "compat_legacy": "Valid",
  "description": "ASCII adjust AL after subtraction.",
  "page": 126
 },
 {
  "opcode": "14 ib",
  "instr": "ADC AL, imm8",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Add with carry imm8 to AL.",
  "page": 128
 },
 {
  "opcode": "15 iw",
  "instr": "ADC AX, imm16",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Add with carry imm16 to AX.",
  "page": 128
 },
 {
  "opcode": "15 id",
  "instr": "ADC EAX, imm32",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Add with carry imm32 to EAX.",
  "page": 128
 },
 {
  "opcode": "REX.W + 15 id",
  "instr": "ADC RAX, imm32",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Add with carry imm32 sign extended to 64-bits to RAX.",
  "page": 128
 },
 {
  "opcode": "80 /2 ib",
  "instr": "ADC r/m8, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Add with carry imm8 to r/m8.",
  "page": 128
 },
 {
  "opcode": "REX + 80 /2 ib",
  "instr": "ADC r/m8*, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Add with carry imm8 to r/m8.",
  "page": 128
 },
 {
  "opcode": "81 /2 iw",
  "instr": "ADC r/m16, imm16",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Add with carry imm16 to r/m16.",
  "page": 128
 },
 {
  "opcode": "81 /2 id",
  "instr": "ADC r/m32, imm32",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Add with CF imm32 to r/m32.",
  "page": 128
 },
 {
  "opcode": "REX.W + 81 /2 id",
  "instr": "ADC r/m64, imm32",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Add with CF imm32 sign extended to 64-bits to r/m64.",
  "page": 128
 },
 {
  "opcode": "83 /2 ib",
  "instr": "ADC r/m16, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Add with CF sign-extended imm8 to r/m16.",
  "page": 128
 },
 {
  "opcode": "83 /2 ib",
  "instr": "ADC r/m32, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Add with CF sign-extended imm8 into r/m32.",
  "page": 128
 },
 {
  "opcode": "REX.W + 83 /2 ib",
  "instr": "ADC r/m64, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Add with CF sign-extended imm8 into r/m64.",
  "page": 128
 },
 {
  "opcode": "10 /r",
  "instr": "ADC r/m8, r8",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Add with carry byte register to r/m8.",
  "page": 128
 },
 {
  "opcode": "REX + 10 /r",
  "instr": "ADC r/m8*, r8*",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Add with carry byte register to r/m64.",
  "page": 128
 },
 {
  "opcode": "11 /r",
  "instr": "ADC r/m16, r16",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Add with carry r16 to r/m16.",
  "page": 128
 },
 {
  "opcode": "11 /r",
  "instr": "ADC r/m32, r32",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Add with CF r32 to r/m32.",
  "page": 128
 },
 {
  "opcode": "REX.W + 11 /r",
  "instr": "ADC r/m64, r64",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Add with CF r64 to r/m64.",
  "page": 128
 },
 {
  "opcode": "12 /r",
  "instr": "ADC r8, r/m8",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Add with carry r/m8 to byte register.",
  "page": 128
 },
 {
  "opcode": "REX + 12 /r",
  "instr": "ADC r8*, r/m8*",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Add with carry r/m64 to byte register.",
  "page": 128
 },
 {
  "opcode": "13 /r",
  "instr": "ADC r16, r/m16",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Add with carry r/m16 to r16.",
  "page": 128
 },
 {
  "opcode": "13 /r",
  "instr": "ADC r32, r/m32",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Add with CF r/m32 to r32.",
  "page": 128
 },
 {
  "opcode": "REX.W + 13 /r",
  "instr": "ADC r64, r/m64",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Add with CF r/m64 to r64.",
  "page": 128
 },
 {
  "opcode": "04 ib",
  "instr": "ADD AL, imm8",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Add imm8 to AL.",
  "page": 133
 },
 {
  "opcode": "05 iw",
  "instr": "ADD AX, imm16",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Add imm16 to AX.",
  "page": 133
 },
 {
  "opcode": "05 id",
  "instr": "ADD EAX, imm32",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Add imm32 to EAX.",
  "page": 133
 },
 {
  "opcode": "REX.W + 05 id",
  "instr": "ADD RAX, imm32",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Add imm32 sign-extended to 64-bits to RAX.",
  "page": 133
 },
 {
  "opcode": "80 /0 ib",
  "instr": "ADD r/m8, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Add imm8 to r/m8.",
  "page": 133
 },
 {
  "opcode": "REX + 80 /0 ib",
  "instr": "ADD r/m8*, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Add sign-extended imm8 to r/m8.",
  "page": 133
 },
 {
  "opcode": "81 /0 iw",
  "instr": "ADD r/m16, imm16",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Add imm16 to r/m16.",
  "page": 133
 },
 {
  "opcode": "81 /0 id",
  "instr": "ADD r/m32, imm32",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Add imm32 to r/m32.",
  "page": 133
 },
 {
  "opcode": "REX.W + 81 /0 id",
  "instr": "ADD r/m64, imm32",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Add imm32 sign-extended to 64-bits to r/m64.",
  "page": 133
 },
 {
  "opcode": "83 /0 ib",
  "instr": "ADD r/m16, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Add sign-extended imm8 to r/m16.",
  "page": 133
 },
 {
  "opcode": "83 /0 ib",
  "instr": "ADD r/m32, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Add sign-extended imm8 to r/m32.",
  "page": 133
 },
 {
  "opcode": "REX.W + 83 /0 ib",
  "instr": "ADD r/m64, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Add sign-extended imm8 to r/m64.",
  "page": 133
 },
 {
  "opcode": "00 /r",
  "instr": "ADD r/m8, r8",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Add r8 to r/m8.",
  "page": 133
 },
 {
  "opcode": "REX + 00 /r",
  "instr": "ADD r/m8*, r8*",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Add r8 to r/m8.",
  "page": 133
 },
 {
  "opcode": "01 /r",
  "instr": "ADD r/m16, r16",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Add r16 to r/m16.",
  "page": 133
 },
 {
  "opcode": "01 /r",
  "instr": "ADD r/m32, r32",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Add r32 to r/m32.",
  "page": 133
 },
 {
  "opcode": "REX.W + 01 /r",
  "instr": "ADD r/m64, r64",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Add r64 to r/m64.",
  "page": 133
 },
 {
  "opcode": "02 /r",
  "instr": "ADD r8, r/m8",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Add r/m8 to r8.",
  "page": 133
 },
 {
  "opcode": "REX + 02 /r",
  "instr": "ADD r8*, r/m8*",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Add r/m8 to r8.",
  "page": 133
 },
 {
  "opcode": "03 /r",
  "instr": "ADD r16, r/m16",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Add r/m16 to r16.",
  "page": 133
 },
 {
  "opcode": "03 /r",
  "instr": "ADD r32, r/m32",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Add r/m32 to r32.",
  "page": 133
 },
 {
  "opcode": "REX.W + 03 /r",
  "instr": "ADD r64, r/m64",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Add r/m64 to r64.",
  "page": 133
 },
 {
  "opcode": "24 ib",
  "instr": "AND AL, imm8",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "   AL AND imm8.",
  "page": 163
 },
 {
  "opcode": "25 iw",
  "instr": "AND AX, imm16",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "   AX AND imm16.",
  "page": 163
 },
 {
  "opcode": "25 id",
  "instr": "AND EAX, imm32",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "   EAX AND imm32.",
  "page": 163
 },
 {
  "opcode": "REX.W + 25 id",
  "instr": "AND RAX, imm32",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "   RAX AND imm32 sign-extended to 64-bits.",
  "page": 163
 },
 {
  "opcode": "80 /4 ib",
  "instr": "AND r/m8, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "r/m8 AND imm8.",
  "page": 163
 },
 {
  "opcode": "REX + 80 /4 ib",
  "instr": "AND r/m8*, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "r/m8 AND imm8.",
  "page": 163
 },
 {
  "opcode": "81 /4 iw",
  "instr": "AND r/m16, imm16",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "r/m16 AND imm16.",
  "page": 163
 },
 {
  "opcode": "81 /4 id",
  "instr": "AND r/m32, imm32",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "r/m32 AND imm32.",
  "page": 163
 },
 {
  "opcode": "REX.W + 81 /4 id",
  "instr": "AND r/m64, imm32",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "r/m64 AND imm32 sign extended to 64-bits.",
  "page": 163
 },
 {
  "opcode": "83 /4 ib",
  "instr": "AND r/m16, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "r/m16 AND imm8 (sign-extended).",
  "page": 163
 },
 {
  "opcode": "83 /4 ib",
  "instr": "AND r/m32, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "r/m32 AND imm8 (sign-extended).",
  "page": 163
 },
 {
  "opcode": "REX.W + 83 /4 ib",
  "instr": "AND r/m64, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "r/m64 AND imm8 (sign-extended).",
  "page": 163
 },
 {
  "opcode": "20 /r",
  "instr": "AND r/m8, r8",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "r/m8 AND r8.",
  "page": 163
 },
 {
  "opcode": "REX + 20 /r",
  "instr": "AND r/m8*, r8*",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "r/m64 AND r8 (sign-extended).",
  "page": 163
 },
 {
  "opcode": "21 /r",
  "instr": "AND r/m16, r16",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "r/m16 AND r16.",
  "page": 163
 },
 {
  "opcode": "21 /r",
  "instr": "AND r/m32, r32",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "r/m32 AND r32.",
  "page": 163
 },
 {
  "opcode": "REX.W + 21 /r",
  "instr": "AND r/m64, r64",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "r/m64 AND r32.",
  "page": 163
 },
 {
  "opcode": "22 /r",
  "instr": "AND r8, r/m8",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "r8 AND r/m8.",
  "page": 163
 },
 {
  "opcode": "REX + 22 /r",
  "instr": "AND r8*, r/m8*",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "r/m64 AND r8 (sign-extended).",
  "page": 163
 },
 {
  "opcode": "23 /r",
  "instr": "AND r16, r/m16",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "r16 AND r/m16.",
  "page": 163
 },
 {
  "opcode": "23 /r",
  "instr": "AND r32, r/m32",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "r32 AND r/m32.",
  "page": 163
 },
 {
  "opcode": "REX.W + 23 /r",
  "instr": "AND r64, r/m64",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "r64 AND r/m64.",
  "page": 163
 },
 {
  "opcode": "63 /r",
  "instr": "ARPL r/m16, r16",
  "op_en": "MR",
  "valid_in_64": "N.E.",
  "compat_legacy": "Valid",
  "description": "Adjust RPL of r/m16 to not less than RPL of r16.",
  "page": 178
 },
 {
  "opcode": "62 /r",
  "instr": "BOUND r16, m16&amp;16",
  "op_en": "RM",
  "valid_in_64": "Invalid",
  "compat_legacy": "Valid",
  "description": "Check if r16 (array index) is within bounds specified by m16&amp;16.",
  "page": 208
 },
 {
  "opcode": "62 /r",
  "instr": "BOUND r32, m32&amp;32",
  "op_en": "RM",
  "valid_in_64": "Invalid",
  "compat_legacy": "Valid",
  "description": "Check if r32 (array index) is within bounds specified by m32&amp;32.",
  "page": 208
 },
 {
  "opcode": "0F BC /r",
  "instr": "BSF r16, r/m16",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Bit scan forward on r/m16.",
  "page": 210
 },
 {
  "opcode": "0F BC /r",
  "instr": "BSF r32, r/m32",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Bit scan forward on r/m32.",
  "page": 210
 },
 {
  "opcode": "REX.W + 0F BC /r",
  "instr": "BSF r64, r/m64",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Bit scan forward on r/m64.",
  "page": 210
 },
 {
  "opcode": "0F BD /r",
  "instr": "BSR r16, r/m16",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Bit scan reverse on r/m16.",
  "page": 212
 },
 {
  "opcode": "0F BD /r",
  "instr": "BSR r32, r/m32",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Bit scan reverse on r/m32.",
  "page": 212
 },
 {
  "opcode": "REX.W + 0F BD /r",
  "instr": "BSR r64, r/m64",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Bit scan reverse on r/m64.",
  "page": 212
 },
 {
  "opcode": "0F C8+rd",
  "instr": "BSWAP r32",
  "op_en": "O",
  "valid_in_64": "Valid*",
  "compat_legacy": "Valid",
  "description": "Reverses the byte order of a 32-bit register.",
  "page": 214
 },
 {
  "opcode": "REX.W + 0F C8+rd",
  "instr": "BSWAP r64",
  "op_en": "O",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Reverses the byte order of a 64-bit register.",
  "page": 214
 },
 {
  "opcode": "0F A3 /r",
  "instr": "BT r/m16, r16",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Store selected bit in CF flag.",
  "page": 215
 },
 {
  "opcode": "0F A3 /r",
  "instr": "BT r/m32, r32",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Store selected bit in CF flag.",
  "page": 215
 },
 {
  "opcode": "REX.W + 0F A3 /r",
  "instr": "BT r/m64, r64",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Store selected bit in CF flag.",
  "page": 215
 },
 {
  "opcode": "0F BA /4 ib BT ",
  "instr": "r/m16, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Store selected bit in CF flag.",
  "page": 215
 },
 {
  "opcode": "0F BA /4 ib",
  "instr": "BT r/m32, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Store selected bit in CF flag.",
  "page": 215
 },
 {
  "opcode": "REX.W + 0F BA /4 ib",
  "instr": "BT r/m64, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Store selected bit in CF flag.",
  "page": 215
 },
 {
  "opcode": "0F BB /r",
  "instr": "BTC r/m16, r16",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Store selected bit in CF flag and complement.",
  "page": 217
 },
 {
  "opcode": "0F BB /r",
  "instr": "BTC r/m32, r32",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Store selected bit in CF flag and complement.",
  "page": 217
 },
 {
  "opcode": "REX.W + 0F BB /r",
  "instr": "BTC r/m64, r64",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Store selected bit in CF flag and complement.",
  "page": 217
 },
 {
  "opcode": "0F BA /7 ib",
  "instr": "BTC r/m16, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Store selected bit in CF flag and complement.",
  "page": 217
 },
 {
  "opcode": "0F BA /7 ib",
  "instr": "BTC r/m32, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Store selected bit in CF flag and complement.",
  "page": 217
 },
 {
  "opcode": "REX.W + 0F BA /7 ib",
  "instr": "BTC r/m64, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Store selected bit in CF flag and complement.",
  "page": 217
 },
 {
  "opcode": "0F B3 /r",
  "instr": "BTR r/m16, r16",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Store selected bit in CF flag and clear.",
  "page": 219
 },
 {
  "opcode": "0F B3 /r",
  "instr": "BTR r/m32, r32",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Store selected bit in CF flag and clear.",
  "page": 219
 },
 {
  "opcode": "REX.W + 0F B3 /r",
  "instr": "BTR r/m64, r64",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Store selected bit in CF flag and clear.",
  "page": 219
 },
 {
  "opcode": "0F BA /6 ib",
  "instr": "BTR r/m16, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Store selected bit in CF flag and clear.",
  "page": 219
 },
 {
  "opcode": "0F BA /6 ib",
  "instr": "BTR r/m32, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Store selected bit in CF flag and clear.",
  "page": 219
 },
 {
  "opcode": "REX.W + 0F BA /6 ib",
  "instr": "BTR r/m64, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Store selected bit in CF flag and clear.",
  "page": 219
 },
 {
  "opcode": "0F AB /r",
  "instr": "BTS r/m16, r16",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Store selected bit in CF flag and set.",
  "page": 221
 },
 {
  "opcode": "0F AB /r",
  "instr": "BTS r/m32, r32",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Store selected bit in CF flag and set.",
  "page": 221
 },
 {
  "opcode": "REX.W + 0F AB /r",
  "instr": "BTS r/m64, r64",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Store selected bit in CF flag and set.",
  "page": 221
 },
 {
  "opcode": "0F BA /5 ib",
  "instr": "BTS r/m16, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Store selected bit in CF flag and set.",
  "page": 221
 },
 {
  "opcode": "0F BA /5 ib",
  "instr": "BTS r/m32, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Store selected bit in CF flag and set.",
  "page": 221
 },
 {
  "opcode": "REX.W + 0F BA /5 ib",
  "instr": "BTS r/m64, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Store selected bit in CF flag and set.",
  "page": 221
 },
 {
  "opcode": "F8",
  "instr": "CLC",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Clear CF flag.",
  "page": 240
 },
 {
  "opcode": "FC",
  "instr": "CLD",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Clear DF flag.",
  "page": 241
 },
 {
  "opcode": "FA",
  "instr": "CLI",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Clear interrupt flag; interrupts disabled when interrupt flag cleared.",
  "page": 248
 },
 {
  "opcode": "0F 06",
  "instr": "CLTS",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Clears TS flag in CR0.",
  "page": 250
 },
 {
  "opcode": "F5",
  "instr": "CMC",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Complement CF flag.",
  "page": 253
 },
 {
  "opcode": "3C ib",
  "instr": "CMP AL, imm8",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Compare imm8 with AL.",
  "page": 258
 },
 {
  "opcode": "3D iw",
  "instr": "CMP AX, imm16",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Compare imm16 with AX.",
  "page": 258
 },
 {
  "opcode": "3D id",
  "instr": "CMP EAX, imm32",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Compare imm32 with EAX.",
  "page": 258
 },
 {
  "opcode": "REX.W + 3D id",
  "instr": "CMP RAX, imm32",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Compare imm32 sign-extended to 64-bits with RAX.",
  "page": 258
 },
 {
  "opcode": "80 /7 ib",
  "instr": "CMP r/m8, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Compare imm8 with r/m8.",
  "page": 258
 },
 {
  "opcode": "REX + 80 /7 ib",
  "instr": "CMP r/m8*, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Compare imm8 with r/m8.",
  "page": 258
 },
 {
  "opcode": "81 /7 iw",
  "instr": "CMP r/m16, imm16",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Compare imm16 with r/m16.",
  "page": 258
 },
 {
  "opcode": "81 /7 id",
  "instr": "CMP r/m32, imm32",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Compare imm32 with r/m32.",
  "page": 258
 },
 {
  "opcode": "REX.W + 81 /7 id",
  "instr": "CMP r/m64, imm32",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Compare imm32 sign-extended to 64-bits with r/m64.",
  "page": 258
 },
 {
  "opcode": "83 /7 ib",
  "instr": "CMP r/m16, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Compare imm8 with r/m16.",
  "page": 258
 },
 {
  "opcode": "83 /7 ib",
  "instr": "CMP r/m32, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Compare imm8 with r/m32.",
  "page": 258
 },
 {
  "opcode": "REX.W + 83 /7 ib",
  "instr": "CMP r/m64, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Compare imm8 with r/m64.",
  "page": 258
 },
 {
  "opcode": "38 /r",
  "instr": "CMP r/m8, r8",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Compare r8 with r/m8.",
  "page": 258
 },
 {
  "opcode": "REX + 38 /r",
  "instr": "CMP r/m8*, r8*",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Compare r8 with r/m8.",
  "page": 258
 },
 {
  "opcode": "39 /r",
  "instr": "CMP r/m16, r16",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Compare r16 with r/m16.",
  "page": 258
 },
 {
  "opcode": "39 /r",
  "instr": "CMP r/m32, r32",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Compare r32 with r/m32.",
  "page": 258
 },
 {
  "opcode": "REX.W + 39 /r",
  "instr": "CMP r/m64,r64",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Compare r64 with r/m64.",
  "page": 258
 },
 {
  "opcode": "3A /r",
  "instr": "CMP r8, r/m8",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Compare r/m8 with r8.",
  "page": 258
 },
 {
  "opcode": "REX + 3A /r",
  "instr": "CMP r8*, r/m8*",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Compare r/m8 with r8.",
  "page": 258
 },
 {
  "opcode": "3B /r",
  "instr": "CMP r16, r/m16",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Compare r/m16 with r16.",
  "page": 258
 },
 {
  "opcode": "3B /r",
  "instr": "CMP r32, r/m32",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Compare r/m32 with r32.",
  "page": 258
 },
 {
  "opcode": "REX.W + 3B /r",
  "instr": "CMP r64, r/m64",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Compare r/m64 with r64.",
  "page": 258
 },
 {
  "opcode": "A6",
  "instr": "CMPS m8, m8",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "For legacy mode, compare byte at address DS:(E)SI with byte at address ES:(E)DI; For 64-bit mode compare byte at address (R|E)SI to byte at address (R|E)DI. The status flags are set accordingly.",
  "page": 274
 },
 {
  "opcode": "A7",
  "instr": "CMPS m16, m16",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "For legacy mode, compare word at address DS:(E)SI with word at address ES:(E)DI; For 64-bit mode compare word at address (R|E)SI with word at address (R|E)DI. The status flags are set accordingly.",
  "page": 274
 },
 {
  "opcode": "A7",
  "instr": "CMPS m32, m32",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "For legacy mode, compare dword at address DS:(E)SI at dword at address ES:(E)DI; For 64-bit mode compare dword at address (R|E)SI at dword at address (R|E)DI. The status flags are set accordingly.",
  "page": 274
 },
 {
  "opcode": "REX.W + A7",
  "instr": "CMPS m64, m64",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Compares quadword at address (R|E)SI with quadword at address (R|E)DI and sets the status flags accordingly.",
  "page": 274
 },
 {
  "opcode": "A6",
  "instr": "CMPSB",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "For legacy mode, compare byte at address DS:(E)SI with byte at address ES:(E)DI; For 64-bit mode compare byte at address (R|E)SI with byte at address (R|E)DI. The status flags are set accordingly.",
  "page": 274
 },
 {
  "opcode": "A7",
  "instr": "CMPSW",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "For legacy mode, compare word at address DS:(E)SI with word at address ES:(E)DI; For 64-bit mode compare word at address (R|E)SI with word at address (R|E)DI. The status flags are set accordingly.",
  "page": 274
 },
 {
  "opcode": "A7",
  "instr": "CMPSD",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "For legacy mode, compare dword at address DS:(E)SI with dword at address ES:(E)DI; For 64-bit mode compare dword at address (R|E)SI with dword at address (R|E)DI. The status flags are set accordingly.",
  "page": 274
 },
 {
  "opcode": "REX.W + A7",
  "instr": "CMPSQ",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Compares quadword at address (R|E)SI with quadword at address (R|E)DI and sets the status flags accordingly.",
  "page": 274
 },
 {
  "opcode": "0F A2",
  "instr": "CPUID",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Returns processor identification and feature information to the EAX, EBX, ECX, and EDX registers, as determined by input entered in EAX (in some cases, ECX as well).",
  "page": 295
 },
 {
  "opcode": "99",
  "instr": "CWD",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "DX:AX ← sign-extend of AX.",
  "page": 387
 },
 {
  "opcode": "99",
  "instr": "CDQ",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "EDX:EAX ← sign-extend of EAX.",
  "page": 387
 },
 {
  "opcode": "REX.W + 99",
  "instr": "CQO",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "RDX:RAX← sign-extend of RAX.",
  "page": 387
 },
 {
  "opcode": "27",
  "instr": "DAA",
  "op_en": "ZO",
  "valid_in_64": "Invalid",
  "compat_legacy": "Valid",
  "description": "Decimal adjust AL after addition.",
  "page": 388
 },
 {
  "opcode": "2F",
  "instr": "DAS",
  "op_en": "ZO",
  "valid_in_64": "Invalid",
  "compat_legacy": "Valid",
  "description": "Decimal adjust AL after subtraction.",
  "page": 390
 },
 {
  "opcode": "F4",
  "instr": "HLT",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "HaltInstruction Operand EncodingOp/EnOperand 1Operand 2Operand 3Operand 4ZONANANANADescriptionStops instruction execution and places the processor in a HALT state. An enabled interrupt (including NMI and SMI), a debug exception, the BINIT# signal, the INIT# signal, or the RESET# signal will resume execution. If an interrupt (including NMI) is used to resume execution after a HLT instruction, the saved instruction pointer (CS:EIP) points to the instruction following the HLT instruction.",
  "page": 546
 },
 {
  "opcode": "E4 ib",
  "instr": "IN AL, imm8",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Input byte from imm8 I/O port address into AL.",
  "page": 560
 },
 {
  "opcode": "E5 ib",
  "instr": "IN AX, imm8",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Input word from imm8 I/O port address into AX.",
  "page": 560
 },
 {
  "opcode": "E5 ib",
  "instr": "IN EAX, imm8",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Input dword from imm8 I/O port address into EAX.",
  "page": 560
 },
 {
  "opcode": "EC",
  "instr": "IN AL,DX",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Input byte from I/O port in DX into AL.",
  "page": 560
 },
 {
  "opcode": "ED",
  "instr": "IN AX,DX",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Input word from I/O port in DX into AX.",
  "page": 560
 },
 {
  "opcode": "ED",
  "instr": "IN EAX,DX",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Input doubleword from I/O port in DX into EAX.",
  "page": 560
 },
 {
  "opcode": "6C",
  "instr": "INS m8, DX ",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Input byte from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.*6DINS m16, DXZOValidValidInput word from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.16DINS m32, DXZOValidValidInput doubleword from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.16CINSBZOValidValidInput byte from I/O port specified in DX into memory location specified with ES:(E)DI or RDI.16DINSWZOValidValidInput word from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.16DINSDZOValidValidInput doubleword from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.1NOTES:* In 64-bit mode, only 64-bit (RDI) and 32-bit (EDI) address sizes are supported. In non-64-bit mode, only 32-bit (EDI) and 16-bit (DI) address sizes are supported.",
  "page": 564
 },
 {
  "opcode": "CC",
  "instr": "INT3",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Generate breakpoint trap.",
  "page": 570
 },
 {
  "opcode": "CD ib",
  "instr": "INT imm8",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Generate software interrupt with vector specified by immediate byte.",
  "page": 570
 },
 {
  "opcode": "CE",
  "instr": "INTO",
  "op_en": "ZO",
  "valid_in_64": "Invalid",
  "compat_legacy": "Valid",
  "description": "Generate overflow trap if overflow flag is 1.",
  "page": 570
 },
 {
  "opcode": "F1",
  "instr": "INT1",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Generate debug trap.",
  "page": 570
 },
 {
  "opcode": "0F 08",
  "instr": "INVD",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Flush internal caches; initiate flushing of external caches.",
  "page": 583
 },
 {
  "opcode": "CF",
  "instr": "IRET",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Interrupt return (16-bit operand size).",
  "page": 590
 },
 {
  "opcode": "CF",
  "instr": "IRETD",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Interrupt return (32-bit operand size).",
  "page": 590
 },
 {
  "opcode": "REX.W + CF",
  "instr": "IRETQ",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Interrupt return (64-bit operand size).",
  "page": 590
 },
 {
  "opcode": "EB cb",
  "instr": "JMP rel8",
  "op_en": "D",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Jump short, RIP = RIP + 8-bit displacement sign extended to 64-bitsE9 cwJMP rel16DN.S.",
  "page": 602
 },
 {
  "opcode": "0F 02 /r",
  "instr": "LAR r16, r16/m16",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "r16 ← access rights referenced by r16/m160F 02 /rLAR reg, r32/m161RMValidValidreg ← access rights referenced by r32/m16NOTES:1. For all loads (regardless of source or destination sizing) only bits 16-0 are used. Other bits are ignored.",
  "page": 629
 },
 {
  "opcode": "C5 /r",
  "instr": "LDS r16,m16:16",
  "op_en": "RM",
  "valid_in_64": "Invalid",
  "compat_legacy": "Valid",
  "description": "Load DS:r16 with far pointer from memory.",
  "page": 635
 },
 {
  "opcode": "C5 /r",
  "instr": "LDS r32,m16:32",
  "op_en": "RM",
  "valid_in_64": "Invalid",
  "compat_legacy": "Valid",
  "description": "Load DS:r32 with far pointer from memory.",
  "page": 635
 },
 {
  "opcode": "0F B2 /r",
  "instr": "LSS r16,m16:16",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Load SS:r16 with far pointer from memory.",
  "page": 635
 },
 {
  "opcode": "0F B2 /r",
  "instr": "LSS r32,m16:32",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Load SS:r32 with far pointer from memory.",
  "page": 635
 },
 {
  "opcode": "REX + 0F B2 /r",
  "instr": "LSS r64,m16:64",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Load SS:r64 with far pointer from memory.",
  "page": 635
 },
 {
  "opcode": "C4 /r",
  "instr": "LES r16,m16:16",
  "op_en": "RM",
  "valid_in_64": "Invalid",
  "compat_legacy": "Valid",
  "description": "Load ES:r16 with far pointer from memory.",
  "page": 635
 },
 {
  "opcode": "C4 /r",
  "instr": "LES r32,m16:32",
  "op_en": "RM",
  "valid_in_64": "Invalid",
  "compat_legacy": "Valid",
  "description": "Load ES:r32 with far pointer from memory.",
  "page": 635
 },
 {
  "opcode": "0F B4 /r",
  "instr": "LFS r16,m16:16",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Load FS:r16 with far pointer from memory.",
  "page": 635
 },
 {
  "opcode": "0F B4 /r",
  "instr": "LFS r32,m16:32",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Load FS:r32 with far pointer from memory.",
  "page": 635
 },
 {
  "opcode": "REX + 0F B4 /r",
  "instr": "LFS r64,m16:64",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Load FS:r64 with far pointer from memory.",
  "page": 635
 },
 {
  "opcode": "0F B5 /r",
  "instr": "LGS r16,m16:16",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Load GS:r16 with far pointer from memory.",
  "page": 635
 },
 {
  "opcode": "0F B5 /r",
  "instr": "LGS r32,m16:32",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Load GS:r32 with far pointer from memory.",
  "page": 635
 },
 {
  "opcode": "REX + 0F B5 /r",
  "instr": "LGS r64,m16:64",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Load GS:r64 with far pointer from memory.",
  "page": 635
 },
 {
  "opcode": "8D /r",
  "instr": "LEA r16,m",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Store effective address for m in register r16.",
  "page": 639
 },
 {
  "opcode": "8D /r",
  "instr": "LEA r32,m",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Store effective address for m in register r32.",
  "page": 639
 },
 {
  "opcode": "REX.W + 8D /r",
  "instr": "LEA r64,m",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Store effective address for m in register r64. Instruction Operand EncodingOp/EnOperand 1Operand 2Operand 3Operand 4RMModRM:reg (w)ModRM:r/m (r)NANADescriptionComputes the effective address of the second operand (the source operand) and stores it in the first operand (destination operand). The source operand is a memory address (offset part) specified with one of the processors addressing modes; the destination operand is a general-purpose register. The address-size and operand-size attri-butes affect the action performed by this instruction, as shown in the following table. The operand-size attribute of the instruction is determined by the chosen register; the address-size attribute is determined by the attribute of the code segment.",
  "page": 639
 },
 {
  "opcode": "F0",
  "instr": "LOCK",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Asserts LOCK# signal for duration of the accompanying instruction.",
  "page": 651
 },
 {
  "opcode": "AC",
  "instr": "LODS m8",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "For legacy mode, Load byte at address DS:(E)SI into AL. For 64-bit mode load byte at address (R)SI into AL.",
  "page": 653
 },
 {
  "opcode": "AD",
  "instr": "LODS m16",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "For legacy mode, Load word at address DS:(E)SI into AX. For 64-bit mode load word at address (R)SI into AX.",
  "page": 653
 },
 {
  "opcode": "AD",
  "instr": "LODS m32",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "For legacy mode, Load dword at address DS:(E)SI into EAX. For 64-bit mode load dword at address (R)SI into EAX.",
  "page": 653
 },
 {
  "opcode": "REX.W + AD",
  "instr": "LODS m64",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Load qword at address (R)SI into RAX.",
  "page": 653
 },
 {
  "opcode": "AC",
  "instr": "LODSB",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "For legacy mode, Load byte at address DS:(E)SI into AL. For 64-bit mode load byte at address (R)SI into AL.",
  "page": 653
 },
 {
  "opcode": "AD",
  "instr": "LODSW",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "For legacy mode, Load word at address DS:(E)SI into AX. For 64-bit mode load word at address (R)SI into AX.",
  "page": 653
 },
 {
  "opcode": "AD",
  "instr": "LODSD",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "For legacy mode, Load dword at address DS:(E)SI into EAX. For 64-bit mode load dword at address (R)SI into EAX.",
  "page": 653
 },
 {
  "opcode": "REX.W + AD",
  "instr": "LODSQ",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Load qword at address (R)SI into RAX.",
  "page": 653
 },
 {
  "opcode": "E2 cb",
  "instr": "LOOP rel8",
  "op_en": "D",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Decrement count; jump short if count ≠ 0.",
  "page": 656
 },
 {
  "opcode": "E1 cb",
  "instr": "LOOPE rel8",
  "op_en": "D",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Decrement count; jump short if count ≠ 0 and ZF = 1.",
  "page": 656
 },
 {
  "opcode": "E0 cb",
  "instr": "LOOPNE rel8",
  "op_en": "D",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Decrement count; jump short if count ≠ 0 and ZF = 0.",
  "page": 656
 },
 {
  "opcode": "0F 03 /r",
  "instr": "LSL r16, r16/m16",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Load: r16 ← segment limit, selector r16/m16.",
  "page": 658
 },
 {
  "opcode": "0F 03 /r",
  "instr": "LSL r32, r32/m16*",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Load: r32 ← segment limit, selector r32/m16.",
  "page": 658
 },
 {
  "opcode": "REX.W + 0F 03 /r",
  "instr": "LSL r64, r32/m16*",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Load: r64 ← segment limit, selector r32/m16NOTES:* For all loads (regardless of destination sizing), only bits 16-0 are used. Other bits are ignored.",
  "page": 658
 },
 {
  "opcode": "0F 01 C8",
  "instr": "MONITOR",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Sets up a linear address range to be monitored by hardware and activates the monitor. The address range should be a write-back memory caching type. The address is DS:RAX/EAX/AX.",
  "page": 697
 },
 {
  "opcode": "88 /r",
  "instr": "MOV r/m8,r8",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Move r8 to r/m8.",
  "page": 699
 },
 {
  "opcode": "REX + 88 /r",
  "instr": "MOV r/m8***,r8***",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Move r8 to r/m8.",
  "page": 699
 },
 {
  "opcode": "89 /r",
  "instr": "MOV r/m16,r16",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Move r16 to r/m16.",
  "page": 699
 },
 {
  "opcode": "89 /r",
  "instr": "MOV r/m32,r32",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Move r32 to r/m32.",
  "page": 699
 },
 {
  "opcode": "REX.W + 89 /r",
  "instr": "MOV r/m64,r64",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Move r64 to r/m64.",
  "page": 699
 },
 {
  "opcode": "8A /r",
  "instr": "MOV r8,r/m8",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Move r/m8 to r8.",
  "page": 699
 },
 {
  "opcode": "REX + 8A /r",
  "instr": "MOV r8***,r/m8***",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Move r/m8 to r8.",
  "page": 699
 },
 {
  "opcode": "8B /r",
  "instr": "MOV r16,r/m16",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Move r/m16 to r16.",
  "page": 699
 },
 {
  "opcode": "8B /r",
  "instr": "MOV r32,r/m32",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Move r/m32 to r32.",
  "page": 699
 },
 {
  "opcode": "REX.W + 8B /r",
  "instr": "MOV r64,r/m64",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Move r/m64 to r64.",
  "page": 699
 },
 {
  "opcode": "8C /r",
  "instr": "MOV r/m16,Sreg**",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Move segment register to r/m16.",
  "page": 699
 },
 {
  "opcode": "REX.W + 8C /r",
  "instr": "MOV r16/r32/m16, Sreg** MR",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Move zero extended 16-bit segment register to r64/m16.",
  "page": 699
 },
 {
  "opcode": "8E /r",
  "instr": "MOV Sreg,r/m16**",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Move r/m16 to segment register.",
  "page": 699
 },
 {
  "opcode": "REX.W + 8E /r",
  "instr": "MOV Sreg,r/m64**",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Move lower 16 bits of r/m64 to segment register.",
  "page": 699
 },
 {
  "opcode": "A0",
  "instr": "MOV AL,moffs8*",
  "op_en": "FD",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Move byte at (seg:offset) to AL.",
  "page": 699
 },
 {
  "opcode": "REX.W + A0",
  "instr": "MOV AL,moffs8*",
  "op_en": "FD",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "  Move byte at (offset) to AL.",
  "page": 699
 },
 {
  "opcode": "A1",
  "instr": "MOV AX,moffs16*",
  "op_en": "FD",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Move word at (seg:offset) to AX.",
  "page": 699
 },
 {
  "opcode": "A1",
  "instr": "MOV EAX,moffs32*",
  "op_en": "FD",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Move doubleword at (seg:offset) to EAX.",
  "page": 699
 },
 {
  "opcode": "REX.W + A1",
  "instr": "MOV RAX,moffs64*",
  "op_en": "FD",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Move quadword at (offset) to RAX.",
  "page": 699
 },
 {
  "opcode": "A2",
  "instr": "MOV moffs8,AL",
  "op_en": "TD",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Move AL to (seg:offset).",
  "page": 699
 },
 {
  "opcode": "REX.W + A2",
  "instr": "MOV moffs8***,AL",
  "op_en": "TD",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Move AL to (offset).",
  "page": 699
 },
 {
  "opcode": "A3",
  "instr": "MOV moffs16*,AX",
  "op_en": "TD",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Move AX to (seg:offset).",
  "page": 699
 },
 {
  "opcode": "A3",
  "instr": "MOV moffs32*,EAX",
  "op_en": "TD",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Move EAX to (seg:offset).",
  "page": 699
 },
 {
  "opcode": "REX.W + A3",
  "instr": "MOV moffs64*,RAX",
  "op_en": "TD",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Move RAX to (offset).",
  "page": 699
 },
 {
  "opcode": "B0+ rb ib",
  "instr": "MOV r8, imm8",
  "op_en": "OI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Move imm8 to r8.",
  "page": 699
 },
 {
  "opcode": "REX + B0+ rb ib",
  "instr": "MOV r8***, imm8",
  "op_en": "OI",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Move imm8 to r8.",
  "page": 699
 },
 {
  "opcode": "B8+ rw iw",
  "instr": "MOV r16, imm16",
  "op_en": "OI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Move imm16 to r16.",
  "page": 699
 },
 {
  "opcode": "B8+ rd id",
  "instr": "MOV r32, imm32",
  "op_en": "OI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Move imm32 to r32.",
  "page": 699
 },
 {
  "opcode": "REX.W + B8+ rd io",
  "instr": "MOV r64, imm64",
  "op_en": "OI",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Move imm64 to r64.",
  "page": 699
 },
 {
  "opcode": "C6 /0 ib",
  "instr": "MOV r/m8, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Move imm8 to r/m8.",
  "page": 699
 },
 {
  "opcode": "REX + C6 /0 ib",
  "instr": "MOV r/m8***, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Move imm8 to r/m8.",
  "page": 699
 },
 {
  "opcode": "C7 /0 iw",
  "instr": "MOV r/m16, imm16",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Move imm16 to r/m16.",
  "page": 699
 },
 {
  "opcode": "C7 /0 id",
  "instr": "MOV r/m32, imm32",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Move imm32 to r/m32.",
  "page": 699
 },
 {
  "opcode": "REX.W + C7 /0 id",
  "instr": "MOV r/m64, imm32",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Move imm32 sign extended to 64-bits to r/m64.",
  "page": 699
 },
 {
  "opcode": "0F 38 F0 /r",
  "instr": "MOVBE r16, m16",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Reverse byte order in m16 and move to r16.",
  "page": 717
 },
 {
  "opcode": "0F 38 F0 /r",
  "instr": "MOVBE r32, m32",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Reverse byte order in m32 and move to r32.",
  "page": 717
 },
 {
  "opcode": "REX.W + 0F 38 F0 /r",
  "instr": "MOVBE r64, m64",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Reverse byte order in m64 and move to r64. 0F 38 F1 /rMOVBE m16, r16MRValidValidReverse byte order in r16 and move to m16.",
  "page": 717
 },
 {
  "opcode": "0F 38 F1 /r",
  "instr": "MOVBE m32, r32",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Reverse byte order in r32 and move to m32.",
  "page": 717
 },
 {
  "opcode": "REX.W + 0F 38 F1 /r",
  "instr": "MOVBE m64, r64",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Reverse byte order in r64 and move to m64. Instruction Operand EncodingOp/EnOperand 1Operand 2Operand 3Operand 4RMModRM:reg (w)ModRM:r/m (r)NANAMRModRM:r/m (w)ModRM:reg (r)NANADescriptionPerforms a byte swap operation on the data copied from the second operand (source operand) and store the result in the first operand (destination operand). The source operand can be a general-purpose register, or memory loca-tion; the destination register can be a general-purpose register, or a memory location; however, both operands can not be registers, and only one operand can be a memory location. Both operands must be the same size, which can be a word, a doubleword or quadword. The MOVBE instruction is provided for swapping the bytes on a read from memory or on a write to memory; thus providing support for converting little-endian values to big-endian format and vice versa.",
  "page": 717
 },
 {
  "opcode": "F2 0F D6 /r",
  "instr": "MOVDQ2Q mm, xmm",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Move low quadword from xmm to mmx register.",
  "page": 743
 },
 {
  "opcode": "F3 0F D6 /r",
  "instr": "MOVQ2DQ xmm, mm",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Move quadword from mmx to low quadword of xmm.",
  "page": 774
 },
 {
  "opcode": "0F BE /r",
  "instr": "MOVSX r16, r/m8",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Move byte to word with sign-extension.",
  "page": 792
 },
 {
  "opcode": "0F BE /r",
  "instr": "MOVSX r32, r/m8",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Move byte to doubleword with sign-extension.",
  "page": 792
 },
 {
  "opcode": "REX.W + 0F BE /r",
  "instr": "MOVSX r64, r/m8",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Move byte to quadword with sign-extension.",
  "page": 792
 },
 {
  "opcode": "0F BF /r",
  "instr": "MOVSX r32, r/m16",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Move word to doubleword, with sign-extension.",
  "page": 792
 },
 {
  "opcode": "REX.W + 0F BF /r",
  "instr": "MOVSX r64, r/m16",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Move word to quadword with sign-extension.",
  "page": 792
 },
 {
  "opcode": "63 /r*",
  "instr": "MOVSXD r16, r/m16",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Move word to word with sign-extension.",
  "page": 792
 },
 {
  "opcode": "63 /r*",
  "instr": "MOVSXD r32, r/m32",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Move doubleword to doubleword with sign-extension.",
  "page": 792
 },
 {
  "opcode": "REX.W + 63 /r",
  "instr": "MOVSXD r64, r/m32",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Move doubleword to quadword with sign-extension.",
  "page": 792
 },
 {
  "opcode": "0F B6 /r",
  "instr": "MOVZX r16, r/m8",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Move byte to word with zero-extension.",
  "page": 802
 },
 {
  "opcode": "0F B6 /r",
  "instr": "MOVZX r32, r/m8",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Move byte to doubleword, zero-extension.",
  "page": 802
 },
 {
  "opcode": "REX.W + 0F B6 /r",
  "instr": "MOVZX r64, r/m8*",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Move byte to quadword, zero-extension.",
  "page": 802
 },
 {
  "opcode": "0F B7 /r",
  "instr": "MOVZX r32, r/m16",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Move word to doubleword, zero-extension.",
  "page": 802
 },
 {
  "opcode": "REX.W + 0F B7 /r",
  "instr": "MOVZX r64, r/m16",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Move word to quadword, zero-extension.",
  "page": 802
 },
 {
  "opcode": "0F 01 C9",
  "instr": "MWAIT",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "A hint that allows the processor to stop instruction execution and enter an implementation-dependent optimized state until occurrence of a class of events.",
  "page": 826
 },
 {
  "opcode": "0C ib",
  "instr": "OR AL, imm8",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "   AL OR imm8.",
  "page": 834
 },
 {
  "opcode": "0D iw",
  "instr": "OR AX, imm16",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "   AX OR imm16.",
  "page": 834
 },
 {
  "opcode": "0D id",
  "instr": "OR EAX, imm32",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "   EAX OR imm32.",
  "page": 834
 },
 {
  "opcode": "REX.W + 0D id",
  "instr": "OR RAX, imm32",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "   RAX OR imm32 (sign-extended).",
  "page": 834
 },
 {
  "opcode": "80 /1 ib",
  "instr": "OR r/m8, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "r/m8 OR imm8.",
  "page": 834
 },
 {
  "opcode": "REX + 80 /1 ib",
  "instr": "OR r/m8*, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "r/m8 OR imm8.",
  "page": 834
 },
 {
  "opcode": "81 /1 iw",
  "instr": "OR r/m16, imm16",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": " r/m16 OR imm16.",
  "page": 834
 },
 {
  "opcode": "81 /1 id",
  "instr": "OR r/m32, imm32",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": " r/m32 OR imm32.",
  "page": 834
 },
 {
  "opcode": "REX.W + 81 /1 id",
  "instr": "OR r/m64, imm32",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": " r/m64 OR imm32 (sign-extended).",
  "page": 834
 },
 {
  "opcode": "83 /1 ib",
  "instr": "OR r/m16, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "r/m16 OR imm8 (sign-extended).",
  "page": 834
 },
 {
  "opcode": "83 /1 ib",
  "instr": "OR r/m32, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "r/m32 OR imm8 (sign-extended).",
  "page": 834
 },
 {
  "opcode": "REX.W + 83 /1 ib",
  "instr": "OR r/m64, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "r/m64 OR imm8 (sign-extended).",
  "page": 834
 },
 {
  "opcode": "08 /r",
  "instr": "OR r/m8, r8",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "r/m8 OR r8.",
  "page": 834
 },
 {
  "opcode": "REX + 08 /r",
  "instr": "OR r/m8*, r8*",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "r/m8 OR r8.",
  "page": 834
 },
 {
  "opcode": "09 /r",
  "instr": "OR r/m16, r16",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "r/m16 OR r16.",
  "page": 834
 },
 {
  "opcode": "09 /r",
  "instr": "OR r/m32, r32",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "r/m32 OR r32.",
  "page": 834
 },
 {
  "opcode": "REX.W + 09 /r",
  "instr": "OR r/m64, r64",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "r/m64 OR r64.",
  "page": 834
 },
 {
  "opcode": "0A /r",
  "instr": "OR r8, r/m8",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "r8 OR r/m8.",
  "page": 834
 },
 {
  "opcode": "REX + 0A /r",
  "instr": "OR r8*, r/m8*",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "r8 OR r/m8.",
  "page": 834
 },
 {
  "opcode": "0B /r",
  "instr": "OR r16, r/m16",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "r16 OR r/m16.",
  "page": 834
 },
 {
  "opcode": "0B /r",
  "instr": "OR r32, r/m32",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "r32 OR r/m32.",
  "page": 834
 },
 {
  "opcode": "REX.W + 0B /r",
  "instr": "OR r64, r/m64",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "r64 OR r/m64.",
  "page": 834
 },
 {
  "opcode": "F3 90",
  "instr": "PAUSE",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid ",
  "description": "Gives hint to processor that improves performance of spin-wait loops.",
  "page": 897
 },
 {
  "opcode": "61",
  "instr": "POPA",
  "op_en": "ZO",
  "valid_in_64": "Invalid",
  "compat_legacy": "Valid",
  "description": "Pop DI, SI, BP, BX, DX, CX, and AX.",
  "page": 1057
 },
 {
  "opcode": "61",
  "instr": "POPAD",
  "op_en": "ZO",
  "valid_in_64": "Invalid",
  "compat_legacy": "Valid",
  "description": "Pop EDI, ESI, EBP, EBX, EDX, ECX, and EAX.",
  "page": 1057
 },
 {
  "opcode": "F3 0F B8 /r",
  "instr": "POPCNT r16, r/m16",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "POPCNT on r/m16F3 0F B8 /rPOPCNT r32, r/m32RMValidValidPOPCNT on r/m32F3 REX.W 0F B8 /rPOPCNT r64, r/m64RMValidN.E.",
  "page": 1059
 },
 {
  "opcode": "60",
  "instr": "PUSHA",
  "op_en": "ZO",
  "valid_in_64": "Invalid",
  "compat_legacy": "Valid",
  "description": "Push AX, CX, DX, BX, original SP, BP, SI, and DI.",
  "page": 1178
 },
 {
  "opcode": "60",
  "instr": "PUSHAD",
  "op_en": "ZO",
  "valid_in_64": "Invalid",
  "compat_legacy": "Valid",
  "description": "Push EAX, ECX, EDX, EBX, original ESP, EBP, ESI, and EDI.",
  "page": 1178
 },
 {
  "opcode": "F3 6C",
  "instr": "REP INS m8, DX",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Input (E)CX bytes from port DX into ES:[(E)DI].",
  "page": 1211
 },
 {
  "opcode": "F3 6C",
  "instr": "REP INS m8, DX",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Input RCX bytes from port DX into [RDI].",
  "page": 1211
 },
 {
  "opcode": "F3 6D",
  "instr": "REP INS m16, DX",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Input (E)CX words from port DX into ES:[(E)DI.]F3 6DREP INS m32, DXZOValid ValidInput (E)CX doublewords from port DX into ES:[(E)DI].",
  "page": 1211
 },
 {
  "opcode": "F3 6D",
  "instr": "REP INS r/m32, DX",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Input RCX default size from port DX into [RDI].",
  "page": 1211
 },
 {
  "opcode": "F3 A4",
  "instr": "REP MOVS m8, m8",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Move (E)CX bytes from DS:[(E)SI] to ES:[(E)DI].",
  "page": 1211
 },
 {
  "opcode": "F3 REX.W A4",
  "instr": "REP MOVS m8, m8",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Move RCX bytes from [RSI] to [RDI].",
  "page": 1211
 },
 {
  "opcode": "F3 A5",
  "instr": "REP MOVS m16, m16",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Move (E)CX words from DS:[(E)SI] to ES:[(E)DI].",
  "page": 1211
 },
 {
  "opcode": "F3 A5",
  "instr": "REP MOVS m32, m32",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Move (E)CX doublewords from DS:[(E)SI] to ES:[(E)DI].",
  "page": 1211
 },
 {
  "opcode": "F3 REX.W A5",
  "instr": "REP MOVS m64, m64",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Move RCX quadwords from [RSI] to [RDI].",
  "page": 1211
 },
 {
  "opcode": "F3 6E",
  "instr": "REP OUTS DX, r/m8",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Output (E)CX bytes from DS:[(E)SI] to port DX.",
  "page": 1211
 },
 {
  "opcode": "F3 REX.W 6E",
  "instr": "REP OUTS DX, r/m8*",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Output RCX bytes from [RSI] to port DX.",
  "page": 1211
 },
 {
  "opcode": "F3 6F",
  "instr": "REP OUTS DX, r/m16",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Output (E)CX words from DS:[(E)SI] to port DX.",
  "page": 1211
 },
 {
  "opcode": "F3 6F",
  "instr": "REP OUTS DX, r/m32",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Output (E)CX doublewords from DS:[(E)SI] to port DX.",
  "page": 1211
 },
 {
  "opcode": "F3 REX.W 6F",
  "instr": "REP OUTS DX, r/m32",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Output RCX default size from [RSI] to port DX.",
  "page": 1211
 },
 {
  "opcode": "F3 AC",
  "instr": "REP LODS AL",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Load (E)CX bytes from DS:[(E)SI] to AL.",
  "page": 1211
 },
 {
  "opcode": "F3 REX.W AC",
  "instr": "REP LODS AL",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Load RCX bytes from [RSI] to AL.",
  "page": 1211
 },
 {
  "opcode": "F3 AD",
  "instr": "REP LODS AX",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Load (E)CX words from DS:[(E)SI] to AX.",
  "page": 1211
 },
 {
  "opcode": "F3 AD",
  "instr": "REP LODS EAX",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Load (E)CX doublewords from DS:[(E)SI] to EAX.",
  "page": 1211
 },
 {
  "opcode": "F3 REX.W AD",
  "instr": "REP LODS RAX",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Load RCX quadwords from [RSI] to RAX.",
  "page": 1211
 },
 {
  "opcode": "F3 AA",
  "instr": "REP STOS m8",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Fill (E)CX bytes at ES:[(E)DI] with AL.",
  "page": 1211
 },
 {
  "opcode": "F3 REX.W AA",
  "instr": "REP STOS m8",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Fill RCX bytes at [RDI] with AL.",
  "page": 1211
 },
 {
  "opcode": "F3 AB",
  "instr": "REP STOS m16",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Fill (E)CX words at ES:[(E)DI] with AX.",
  "page": 1211
 },
 {
  "opcode": "F3 AB",
  "instr": "REP STOS m32",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Fill (E)CX doublewords at ES:[(E)DI] with EAX.",
  "page": 1211
 },
 {
  "opcode": "F3 REX.W AB",
  "instr": "REP STOS m64",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Fill RCX quadwords at [RDI] with RAX.",
  "page": 1211
 },
 {
  "opcode": "F3 A6",
  "instr": "REPE CMPS m8, m8",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Find nonmatching bytes in ES:[(E)DI] and DS:[(E)SI].",
  "page": 1211
 },
 {
  "opcode": "F3 REX.W A6",
  "instr": "REPE CMPS m8, m8",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Find non-matching bytes in [RDI] and [RSI].",
  "page": 1211
 },
 {
  "opcode": "F3 A7",
  "instr": "REPE CMPS m16, m16",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Find nonmatching words in ES:[(E)DI] and DS:[(E)SI].",
  "page": 1211
 },
 {
  "opcode": "F3 A7",
  "instr": "REPE CMPS m32, m32",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Find nonmatching doublewords in ES:[(E)DI] and DS:[(E)SI].",
  "page": 1211
 },
 {
  "opcode": "F3 REX.W A7",
  "instr": "REPE CMPS m64, m64",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Find non-matching quadwords in [RDI] and [RSI].",
  "page": 1211
 },
 {
  "opcode": "F3 AE",
  "instr": "REPE SCAS m8",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Find non-AL byte starting at ES:[(E)DI].",
  "page": 1211
 },
 {
  "opcode": "F3 REX.W AE",
  "instr": "REPE SCAS m8",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Find non-AL byte starting at [RDI].",
  "page": 1211
 },
 {
  "opcode": "F3 AF",
  "instr": "REPE SCAS m16",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Find non-AX word starting at ES:[(E)DI].",
  "page": 1211
 },
 {
  "opcode": "F3 AF",
  "instr": "REPE SCAS m32",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Find non-EAX doubleword starting at ES:[(E)DI].",
  "page": 1211
 },
 {
  "opcode": "1C ib",
  "instr": "SBB AL, imm8",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Subtract with borrow imm8 from AL.",
  "page": 1251
 },
 {
  "opcode": "1D iw",
  "instr": "SBB AX, imm16",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Subtract with borrow imm16 from AX.",
  "page": 1251
 },
 {
  "opcode": "1D id",
  "instr": "SBB EAX, imm32",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Subtract with borrow imm32 from EAX.",
  "page": 1251
 },
 {
  "opcode": "REX.W + 1D id",
  "instr": "SBB RAX, imm32",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Subtract with borrow sign-extended imm.32 to 64-bits from RAX.",
  "page": 1251
 },
 {
  "opcode": "80 /3 ib",
  "instr": "SBB r/m8, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Subtract with borrow imm8 from r/m8.",
  "page": 1251
 },
 {
  "opcode": "REX + 80 /3 ib",
  "instr": "SBB r/m8*, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Subtract with borrow imm8 from r/m8.",
  "page": 1251
 },
 {
  "opcode": "81 /3 iw",
  "instr": "SBB r/m16, imm16",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Subtract with borrow imm16 from r/m16.",
  "page": 1251
 },
 {
  "opcode": "81 /3 id",
  "instr": "SBB r/m32, imm32",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Subtract with borrow imm32 from r/m32.",
  "page": 1251
 },
 {
  "opcode": "REX.W + 81 /3 id",
  "instr": "SBB r/m64, imm32",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Subtract with borrow sign-extended imm32 to 64-bits from r/m64.",
  "page": 1251
 },
 {
  "opcode": "83 /3 ib",
  "instr": "SBB r/m16, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Subtract with borrow sign-extended imm8 from r/m16.",
  "page": 1251
 },
 {
  "opcode": "83 /3 ib",
  "instr": "SBB r/m32, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Subtract with borrow sign-extended imm8 from r/m32.",
  "page": 1251
 },
 {
  "opcode": "REX.W + 83 /3 ib",
  "instr": "SBB r/m64, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Subtract with borrow sign-extended imm8 from r/m64.",
  "page": 1251
 },
 {
  "opcode": "18 /r",
  "instr": "SBB r/m8, r8",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Subtract with borrow r8 from r/m8.",
  "page": 1251
 },
 {
  "opcode": "REX + 18 /r",
  "instr": "SBB r/m8*, r8",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Subtract with borrow r8 from r/m8.",
  "page": 1251
 },
 {
  "opcode": "19 /r",
  "instr": "SBB r/m16, r16",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Subtract with borrow r16 from r/m16.",
  "page": 1251
 },
 {
  "opcode": "19 /r",
  "instr": "SBB r/m32, r32",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Subtract with borrow r32 from r/m32.",
  "page": 1251
 },
 {
  "opcode": "REX.W + 19 /r",
  "instr": "SBB r/m64, r64",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Subtract with borrow r64 from r/m64.",
  "page": 1251
 },
 {
  "opcode": "1A /r",
  "instr": "SBB r8, r/m8",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Subtract with borrow r/m8 from r8.",
  "page": 1251
 },
 {
  "opcode": "REX + 1A /r",
  "instr": "SBB r8*, r/m8*",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Subtract with borrow r/m8 from r8.",
  "page": 1251
 },
 {
  "opcode": "1B /r",
  "instr": "SBB r16, r/m16",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Subtract with borrow r/m16 from r16.",
  "page": 1251
 },
 {
  "opcode": "1B /r",
  "instr": "SBB r32, r/m32",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Subtract with borrow r/m32 from r32.",
  "page": 1251
 },
 {
  "opcode": "REX.W + 1B /r",
  "instr": "SBB r64, r/m64",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Subtract with borrow r/m64 from r64.",
  "page": 1251
 },
 {
  "opcode": "AE",
  "instr": "SCAS m8",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Compare AL with byte at ES:(E)DI or RDI, then set status flags.*AFSCAS m16ZOValid ValidCompare AX with word at ES:(E)DI or RDI, then set status flags.*AFSCAS m32ZOValid ValidCompare EAX with doubleword at ES(E)DI or RDI then set status flags.*REX.W + AFSCAS m64ZOValidN.E.",
  "page": 1254
 },
 {
  "opcode": "F9",
  "instr": "STC",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Set CF flag.",
  "page": 1305
 },
 {
  "opcode": "FD",
  "instr": "STD",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Set DF flag.",
  "page": 1306
 },
 {
  "opcode": "FB",
  "instr": "STI",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Set interrupt flag; external, maskable interrupts enabled at the end of the next instruction.",
  "page": 1307
 },
 {
  "opcode": "2C ib",
  "instr": "SUB AL, imm8",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Subtract imm8 from AL.",
  "page": 1316
 },
 {
  "opcode": "2D iw",
  "instr": "SUB AX, imm16",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Subtract imm16 from AX.",
  "page": 1316
 },
 {
  "opcode": "2D id",
  "instr": "SUB EAX, imm32",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Subtract imm32 from EAX.",
  "page": 1316
 },
 {
  "opcode": "REX.W + 2D id",
  "instr": "SUB RAX, imm32",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Subtract imm32 sign-extended to 64-bits from RAX.",
  "page": 1316
 },
 {
  "opcode": "80 /5 ib",
  "instr": "SUB r/m8, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Subtract imm8 from r/m8.",
  "page": 1316
 },
 {
  "opcode": "REX + 80 /5 ib",
  "instr": "SUB r/m8*, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Subtract imm8 from r/m8.",
  "page": 1316
 },
 {
  "opcode": "81 /5 iw",
  "instr": "SUB r/m16, imm16",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Subtract imm16 from r/m16.",
  "page": 1316
 },
 {
  "opcode": "81 /5 id",
  "instr": "SUB r/m32, imm32",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Subtract imm32 from r/m32.",
  "page": 1316
 },
 {
  "opcode": "REX.W + 81 /5 id",
  "instr": "SUB r/m64, imm32",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Subtract imm32 sign-extended to 64-bits from r/m64.",
  "page": 1316
 },
 {
  "opcode": "83 /5 ib",
  "instr": "SUB r/m16, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Subtract sign-extended imm8 from r/m16.",
  "page": 1316
 },
 {
  "opcode": "83 /5 ib",
  "instr": "SUB r/m32, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Subtract sign-extended imm8 from r/m32.",
  "page": 1316
 },
 {
  "opcode": "REX.W + 83 /5 ib",
  "instr": "SUB r/m64, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Subtract sign-extended imm8 from r/m64.",
  "page": 1316
 },
 {
  "opcode": "28 /r",
  "instr": "SUB r/m8, r8",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Subtract r8 from r/m8.",
  "page": 1316
 },
 {
  "opcode": "REX + 28 /r",
  "instr": "SUB r/m8*, r8*",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Subtract r8 from r/m8.",
  "page": 1316
 },
 {
  "opcode": "29 /r",
  "instr": "SUB r/m16, r16",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Subtract r16 from r/m16.",
  "page": 1316
 },
 {
  "opcode": "29 /r",
  "instr": "SUB r/m32, r32",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Subtract r32 from r/m32.",
  "page": 1316
 },
 {
  "opcode": "REX.W + 29 /r",
  "instr": "SUB r/m64, r64",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Subtract r64 from r/m64.",
  "page": 1316
 },
 {
  "opcode": "2A /r",
  "instr": "SUB r8, r/m8",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Subtract r/m8 from r8.",
  "page": 1316
 },
 {
  "opcode": "REX + 2A /r",
  "instr": "SUB r8*, r/m8*",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Subtract r/m8 from r8.",
  "page": 1316
 },
 {
  "opcode": "2B /r",
  "instr": "SUB r16, r/m16",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Subtract r/m16 from r16.",
  "page": 1316
 },
 {
  "opcode": "2B /r",
  "instr": "SUB r32, r/m32",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Subtract r/m32 from r32.",
  "page": 1316
 },
 {
  "opcode": "REX.W + 2B /r",
  "instr": "SUB r64, r/m64",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Subtract r/m64 from r64.",
  "page": 1316
 },
 {
  "opcode": "0F 01 F8",
  "instr": "SWAPGS",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Invalid",
  "description": "Exchanges the current GS base register value with the value contained in MSR address C0000102H.",
  "page": 1328
 },
 {
  "opcode": "0F 05",
  "instr": "SYSCALL",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Invalid",
  "description": "Fast call to privilege level 0 system procedures.",
  "page": 1330
 },
 {
  "opcode": "0F 34",
  "instr": "SYSENTER",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Fast call to privilege level 0 system procedures.",
  "page": 1332
 },
 {
  "opcode": "0F 35",
  "instr": "SYSEXIT",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Fast return to privilege level 3 user code.",
  "page": 1335
 },
 {
  "opcode": "REX.W + 0F 35",
  "instr": "SYSEXIT",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Fast return to 64-bit mode privilege level 3 user code.",
  "page": 1335
 },
 {
  "opcode": "0F 07",
  "instr": "SYSRET",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Invalid",
  "description": "Return to compatibility mode from fast system call REX.W + 0F 07SYSRETZOValidInvalidReturn to 64-bit mode from fast system call Instruction Operand EncodingOp/EnOperand 1Operand 2Operand 3Operand 4ZONANANANADescriptionSYSRET is a companion instruction to the SYSCALL instruction. It returns from an OS system-call handler to user code at privilege level 3. It does so by loading RIP from RCX and loading RFLAGS from R11.1 With a 64-bit operand size, SYSRET remains in 64-bit mode; otherwise, it enters compatibility mode and only the low 32 bits of the regis-ters are loaded.",
  "page": 1338
 },
 {
  "opcode": "A8 ib",
  "instr": "TEST AL, imm8",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "AND imm8 with AL; set SF, ZF, PF according to result.",
  "page": 1341
 },
 {
  "opcode": "A9 iw",
  "instr": "TEST AX, imm16",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "AND imm16 with AX; set SF, ZF, PF according to result.",
  "page": 1341
 },
 {
  "opcode": "A9 id",
  "instr": "TEST EAX, imm32",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "AND imm32 with EAX; set SF, ZF, PF according to result.",
  "page": 1341
 },
 {
  "opcode": "REX.W + A9 id",
  "instr": "TEST RAX, imm32",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "AND imm32 sign-extended to 64-bits with RAX; set SF, ZF, PF according to result.",
  "page": 1341
 },
 {
  "opcode": "F6 /0 ib",
  "instr": "TEST r/m8, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "AND imm8 with r/m8; set SF, ZF, PF according to result.",
  "page": 1341
 },
 {
  "opcode": "REX + F6 /0 ib",
  "instr": "TEST r/m8*, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "AND imm8 with r/m8; set SF, ZF, PF according to result.",
  "page": 1341
 },
 {
  "opcode": "F7 /0 iw",
  "instr": "TEST r/m16, imm16",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "AND imm16 with r/m16; set SF, ZF, PF according to result.",
  "page": 1341
 },
 {
  "opcode": "F7 /0 id",
  "instr": "TEST r/m32, imm32",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "AND imm32 with r/m32; set SF, ZF, PF according to result.",
  "page": 1341
 },
 {
  "opcode": "REX.W + F7 /0 id",
  "instr": "TEST r/m64, imm32",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "AND imm32 sign-extended to 64-bits with r/m64; set SF, ZF, PF according to result.",
  "page": 1341
 },
 {
  "opcode": "84 /r",
  "instr": "TEST r/m8, r8",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "AND r8 with r/m8; set SF, ZF, PF according to result.",
  "page": 1341
 },
 {
  "opcode": "REX + 84 /r",
  "instr": "TEST r/m8*, r8*",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "AND r8 with r/m8; set SF, ZF, PF according to result.",
  "page": 1341
 },
 {
  "opcode": "85 /r",
  "instr": "TEST r/m16, r16",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "AND r16 with r/m16; set SF, ZF, PF according to result.",
  "page": 1341
 },
 {
  "opcode": "85 /r",
  "instr": "TEST r/m32, r32",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "AND r32 with r/m32; set SF, ZF, PF according to result.",
  "page": 1341
 },
 {
  "opcode": "REX.W + 85 /r",
  "instr": "TEST r/m64, r64",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "AND r64 with r/m64; set SF, ZF, PF according to result.",
  "page": 1341
 },
 {
  "opcode": "0F FF /r",
  "instr": "UD01 r32, r/m32",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Raise invalid opcode exception.",
  "page": 1351
 },
 {
  "opcode": "0F B9 /r",
  "instr": "UD1 r32, r/m32",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Raise invalid opcode exception.",
  "page": 1351
 },
 {
  "opcode": "0F 0B",
  "instr": "UD2",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Raise invalid opcode exception.",
  "page": 1351
 },
 {
  "opcode": "9B",
  "instr": "WAIT",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Check pending unmasked floating-point exceptions.",
  "page": 1923
 },
 {
  "opcode": "9B",
  "instr": "FWAIT",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Check pending unmasked floating-point exceptions.",
  "page": 1923
 },
 {
  "opcode": "0F 09",
  "instr": "WBINVD",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Write back and flush Internal caches; initiate writing-back and flushing of external caches.",
  "page": 1924
 },
 {
  "opcode": "0F 30",
  "instr": "WRMSR",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Write the value in EDX:EAX to MSR specified by ECX.",
  "page": 1928
 },
 {
  "opcode": "0F C0 /r",
  "instr": "XADD r/m8, r8",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Exchange r8 and r/m8; load sum into r/m8.",
  "page": 1937
 },
 {
  "opcode": "REX + 0F C0 /r",
  "instr": "XADD r/m8*, r8*",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Exchange r8 and r/m8; load sum into r/m8.",
  "page": 1937
 },
 {
  "opcode": "0F C1 /r",
  "instr": "XADD r/m16, r16",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Exchange r16 and r/m16; load sum into r/m16.",
  "page": 1937
 },
 {
  "opcode": "0F C1 /r",
  "instr": "XADD r/m32, r32",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Exchange r32 and r/m32; load sum into r/m32.",
  "page": 1937
 },
 {
  "opcode": "REX.W + 0F C1 /r",
  "instr": "XADD r/m64, r64",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Exchange r64 and r/m64; load sum into r/m64.",
  "page": 1937
 },
 {
  "opcode": "90+rw",
  "instr": "XCHG AX, r16",
  "op_en": "O",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Exchange r16 with AX.",
  "page": 1942
 },
 {
  "opcode": "90+rw",
  "instr": "XCHG r16, AX",
  "op_en": "O",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Exchange AX with r16.",
  "page": 1942
 },
 {
  "opcode": "90+rd",
  "instr": "XCHG EAX, r32",
  "op_en": "O",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Exchange r32 with EAX.",
  "page": 1942
 },
 {
  "opcode": "REX.W + 90+rd",
  "instr": "XCHG RAX, r64",
  "op_en": "O",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Exchange r64 with RAX.",
  "page": 1942
 },
 {
  "opcode": "90+rd",
  "instr": "XCHG r32, EAX",
  "op_en": "O",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Exchange EAX with r32.",
  "page": 1942
 },
 {
  "opcode": "REX.W + 90+rd",
  "instr": "XCHG r64, RAX",
  "op_en": "O",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Exchange RAX with r64.",
  "page": 1942
 },
 {
  "opcode": "86 /r",
  "instr": "XCHG r/m8, r8",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Exchange r8 (byte register) with byte from r/m8.",
  "page": 1942
 },
 {
  "opcode": "REX + 86 /r",
  "instr": "XCHG r/m8*, r8*",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Exchange r8 (byte register) with byte from r/m8.",
  "page": 1942
 },
 {
  "opcode": "86 /r",
  "instr": "XCHG r8, r/m8",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Exchange byte from r/m8 with r8 (byte register).",
  "page": 1942
 },
 {
  "opcode": "REX + 86 /r",
  "instr": "XCHG r8*, r/m8*",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Exchange byte from r/m8 with r8 (byte register).",
  "page": 1942
 },
 {
  "opcode": "87 /r",
  "instr": "XCHG r/m16, r16",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Exchange r16 with word from r/m16.",
  "page": 1942
 },
 {
  "opcode": "87 /r",
  "instr": "XCHG r16, r/m16",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Exchange word from r/m16 with r16.",
  "page": 1942
 },
 {
  "opcode": "87 /r",
  "instr": "XCHG r/m32, r32",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Exchange r32 with doubleword from r/m32.",
  "page": 1942
 },
 {
  "opcode": "REX.W + 87 /r",
  "instr": "XCHG r/m64, r64",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Exchange r64 with quadword from r/m64.",
  "page": 1942
 },
 {
  "opcode": "87 /r",
  "instr": "XCHG r32, r/m32",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Exchange doubleword from r/m32 with r32.",
  "page": 1942
 },
 {
  "opcode": "REX.W + 87 /r",
  "instr": "XCHG r64, r/m64",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Exchange quadword from r/m64 with r64.",
  "page": 1942
 },
 {
  "opcode": "D7",
  "instr": "XLAT m8",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Set AL to memory byte DS:[(E)BX + unsigned AL].",
  "page": 1948
 },
 {
  "opcode": "D7",
  "instr": "XLATB",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "Set AL to memory byte DS:[(E)BX + unsigned AL].",
  "page": 1948
 },
 {
  "opcode": "REX.W + D7",
  "instr": "XLATB",
  "op_en": "ZO",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "Set AL to memory byte [RBX + unsigned AL].",
  "page": 1948
 },
 {
  "opcode": "34 ib",
  "instr": "XOR AL, imm8",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "   AL XOR imm8.",
  "page": 1950
 },
 {
  "opcode": "35 iw",
  "instr": "XOR AX, imm16",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "   AX XOR imm16.",
  "page": 1950
 },
 {
  "opcode": "35 id",
  "instr": "XOR EAX, imm32",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "EAX XOR imm32.",
  "page": 1950
 },
 {
  "opcode": "REX.W + 35 id",
  "instr": "XOR RAX, imm32",
  "op_en": "I",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "RAX XOR imm32 (sign-extended).",
  "page": 1950
 },
 {
  "opcode": "80 /6 ib",
  "instr": "XOR r/m8, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "r/m8 XOR imm8.",
  "page": 1950
 },
 {
  "opcode": "REX + 80 /6 ib",
  "instr": "XOR r/m8*, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "r/m8 XOR imm8.",
  "page": 1950
 },
 {
  "opcode": "81 /6 iw",
  "instr": "XOR r/m16, imm16",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "r/m16 XOR imm16.",
  "page": 1950
 },
 {
  "opcode": "81 /6 id",
  "instr": "XOR r/m32, imm32",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "r/m32 XOR imm32.",
  "page": 1950
 },
 {
  "opcode": "REX.W + 81 /6 id",
  "instr": "XOR r/m64, imm32",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "r/m64 XOR imm32 (sign-extended).",
  "page": 1950
 },
 {
  "opcode": "83 /6 ib",
  "instr": "XOR r/m16, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "r/m16 XOR imm8 (sign-extended).",
  "page": 1950
 },
 {
  "opcode": "83 /6 ib",
  "instr": "XOR r/m32, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "r/m32 XOR imm8 (sign-extended).",
  "page": 1950
 },
 {
  "opcode": "REX.W + 83 /6 ib",
  "instr": "XOR r/m64, imm8",
  "op_en": "MI",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "r/m64 XOR imm8 (sign-extended).",
  "page": 1950
 },
 {
  "opcode": "30 /r",
  "instr": "XOR r/m8, r8",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "r/m8 XOR r8.",
  "page": 1950
 },
 {
  "opcode": "REX + 30 /r",
  "instr": "XOR r/m8*, r8*",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "r/m8 XOR r8.",
  "page": 1950
 },
 {
  "opcode": "31 /r",
  "instr": "XOR r/m16, r16",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "r/m16 XOR r16.",
  "page": 1950
 },
 {
  "opcode": "31 /r",
  "instr": "XOR r/m32, r32",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "r/m32 XOR r32.",
  "page": 1950
 },
 {
  "opcode": "REX.W + 31 /r",
  "instr": "XOR r/m64, r64",
  "op_en": "MR",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "r/m64 XOR r64.",
  "page": 1950
 },
 {
  "opcode": "32 /r",
  "instr": "XOR r8, r/m8",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "r8 XOR r/m8.",
  "page": 1950
 },
 {
  "opcode": "REX + 32 /r",
  "instr": "XOR r8*, r/m8*",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "r8 XOR r/m8.",
  "page": 1950
 },
 {
  "opcode": "33 /r",
  "instr": "XOR r16, r/m16",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "r16 XOR r/m16.",
  "page": 1950
 },
 {
  "opcode": "33 /r",
  "instr": "XOR r32, r/m32",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "Valid",
  "description": "r32 XOR r/m32.",
  "page": 1950
 },
 {
  "opcode": "REX.W + 33 /r",
  "instr": "XOR r64, r/m64",
  "op_en": "RM",
  "valid_in_64": "Valid",
  "compat_legacy": "N.E.",
  "description": "r64 XOR r/m64.",
  "page": 1950
 }
]