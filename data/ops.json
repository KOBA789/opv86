{
 "source_file": "325383-sdm-vol-2abcds.html",
 "date_parsed": "2020-06-10T14:48:07.862Z",
 "ops": [
  {
   "opcode": "37",
   "instr": "AAA",
   "op_en": "ZO",
   "valid_in_64": "Invalid",
   "compat_legacy": "Valid",
   "description": "ASCII adjust AL after addition.",
   "page": 120
  },
  {
   "opcode": "D5 0A",
   "instr": "AAD",
   "op_en": "ZO",
   "valid_in_64": "Invalid",
   "compat_legacy": "Valid",
   "description": "ASCII adjust AX before division.",
   "page": 122
  },
  {
   "opcode": "D5 ib",
   "instr": "AAD imm8",
   "op_en": "ZO",
   "valid_in_64": "Invalid",
   "compat_legacy": "Valid",
   "description": "Adjust AX before division to number base imm8.",
   "page": 122
  },
  {
   "opcode": "D4 0A",
   "instr": "AAM",
   "op_en": "ZO",
   "valid_in_64": "Invalid",
   "compat_legacy": "Valid",
   "description": "ASCII adjust AX after multiply.",
   "page": 124
  },
  {
   "opcode": "D4 ib",
   "instr": "AAM imm8",
   "op_en": "ZO",
   "valid_in_64": "Invalid",
   "compat_legacy": "Valid",
   "description": "Adjust AX after multiply to number base imm8.",
   "page": 124
  },
  {
   "opcode": "3F",
   "instr": "AAS",
   "op_en": "ZO",
   "valid_in_64": "Invalid",
   "compat_legacy": "Valid",
   "description": "ASCII adjust AL after subtraction.",
   "page": 126
  },
  {
   "opcode": "14 ib",
   "instr": "ADC AL, imm8",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Add with carry imm8 to AL.",
   "page": 128
  },
  {
   "opcode": "15 iw",
   "instr": "ADC AX, imm16",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Add with carry imm16 to AX.",
   "page": 128
  },
  {
   "opcode": "15 id",
   "instr": "ADC EAX, imm32",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Add with carry imm32 to EAX.",
   "page": 128
  },
  {
   "opcode": "REX.W + 15 id",
   "instr": "ADC RAX, imm32",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Add with carry imm32 sign extended to 64-bits to RAX.",
   "page": 128
  },
  {
   "opcode": "80 /2 ib",
   "instr": "ADC r/m8, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Add with carry imm8 to r/m8.",
   "page": 128
  },
  {
   "opcode": "REX + 80 /2 ib",
   "instr": "ADC r/m8*, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Add with carry imm8 to r/m8.",
   "page": 128
  },
  {
   "opcode": "81 /2 iw",
   "instr": "ADC r/m16, imm16",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Add with carry imm16 to r/m16.",
   "page": 128
  },
  {
   "opcode": "81 /2 id",
   "instr": "ADC r/m32, imm32",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Add with CF imm32 to r/m32.",
   "page": 128
  },
  {
   "opcode": "REX.W + 81 /2 id",
   "instr": "ADC r/m64, imm32",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Add with CF imm32 sign extended to 64-bits to r/m64.",
   "page": 128
  },
  {
   "opcode": "83 /2 ib",
   "instr": "ADC r/m16, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Add with CF sign-extended imm8 to r/m16.",
   "page": 128
  },
  {
   "opcode": "83 /2 ib",
   "instr": "ADC r/m32, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Add with CF sign-extended imm8 into r/m32.",
   "page": 128
  },
  {
   "opcode": "REX.W + 83 /2 ib",
   "instr": "ADC r/m64, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Add with CF sign-extended imm8 into r/m64.",
   "page": 128
  },
  {
   "opcode": "10 /r",
   "instr": "ADC r/m8, r8",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Add with carry byte register to r/m8.",
   "page": 128
  },
  {
   "opcode": "REX + 10 /r",
   "instr": "ADC r/m8*, r8*",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Add with carry byte register to r/m64.",
   "page": 128
  },
  {
   "opcode": "11 /r",
   "instr": "ADC r/m16, r16",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Add with carry r16 to r/m16.",
   "page": 128
  },
  {
   "opcode": "11 /r",
   "instr": "ADC r/m32, r32",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Add with CF r32 to r/m32.",
   "page": 128
  },
  {
   "opcode": "REX.W + 11 /r",
   "instr": "ADC r/m64, r64",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Add with CF r64 to r/m64.",
   "page": 128
  },
  {
   "opcode": "12 /r",
   "instr": "ADC r8, r/m8",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Add with carry r/m8 to byte register.",
   "page": 128
  },
  {
   "opcode": "REX + 12 /r",
   "instr": "ADC r8*, r/m8*",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Add with carry r/m64 to byte register.",
   "page": 128
  },
  {
   "opcode": "13 /r",
   "instr": "ADC r16, r/m16",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Add with carry r/m16 to r16.",
   "page": 128
  },
  {
   "opcode": "13 /r",
   "instr": "ADC r32, r/m32",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Add with CF r/m32 to r32.",
   "page": 128
  },
  {
   "opcode": "REX.W + 13 /r",
   "instr": "ADC r64, r/m64",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Add with CF r/m64 to r64.NOTES:*In 64-bit mode, r/m8 can not be encoded to access the following byte registers if a REX prefix is used: AH, BH, CH, DH.",
   "page": 128
  },
  {
   "opcode": "66 0F 38 F6 /r",
   "instr": "ADCX r32, r/m32",
   "op_en": "RM",
   "description": "Unsigned addition of r32 with CF, r/m32 to r32, writes CF.",
   "page": 131
  },
  {
   "opcode": "66 REX.w 0F 38 F6 /r",
   "instr": "ADCX r64, r/m64",
   "op_en": "RM",
   "description": "Unsigned addition of r64 with CF, r/m64 to r64, writes CF.",
   "page": 131
  },
  {
   "opcode": "04 ib",
   "instr": "ADD AL, imm8",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Add imm8 to AL.",
   "page": 133
  },
  {
   "opcode": "05 iw",
   "instr": "ADD AX, imm16",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Add imm16 to AX.",
   "page": 133
  },
  {
   "opcode": "05 id",
   "instr": "ADD EAX, imm32",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Add imm32 to EAX.",
   "page": 133
  },
  {
   "opcode": "REX.W + 05 id",
   "instr": "ADD RAX, imm32",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Add imm32 sign-extended to 64-bits to RAX.",
   "page": 133
  },
  {
   "opcode": "80 /0 ib",
   "instr": "ADD r/m8, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Add imm8 to r/m8.",
   "page": 133
  },
  {
   "opcode": "REX + 80 /0 ib",
   "instr": "ADD r/m8*, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Add sign-extended imm8 to r/m8.",
   "page": 133
  },
  {
   "opcode": "81 /0 iw",
   "instr": "ADD r/m16, imm16",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Add imm16 to r/m16.",
   "page": 133
  },
  {
   "opcode": "81 /0 id",
   "instr": "ADD r/m32, imm32",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Add imm32 to r/m32.",
   "page": 133
  },
  {
   "opcode": "REX.W + 81 /0 id",
   "instr": "ADD r/m64, imm32",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Add imm32 sign-extended to 64-bits to r/m64.",
   "page": 133
  },
  {
   "opcode": "83 /0 ib",
   "instr": "ADD r/m16, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Add sign-extended imm8 to r/m16.",
   "page": 133
  },
  {
   "opcode": "83 /0 ib",
   "instr": "ADD r/m32, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Add sign-extended imm8 to r/m32.",
   "page": 133
  },
  {
   "opcode": "REX.W + 83 /0 ib",
   "instr": "ADD r/m64, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Add sign-extended imm8 to r/m64.",
   "page": 133
  },
  {
   "opcode": "00 /r",
   "instr": "ADD r/m8, r8",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Add r8 to r/m8.",
   "page": 133
  },
  {
   "opcode": "REX + 00 /r",
   "instr": "ADD r/m8*, r8*",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Add r8 to r/m8.",
   "page": 133
  },
  {
   "opcode": "01 /r",
   "instr": "ADD r/m16, r16",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Add r16 to r/m16.",
   "page": 133
  },
  {
   "opcode": "01 /r",
   "instr": "ADD r/m32, r32",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Add r32 to r/m32.",
   "page": 133
  },
  {
   "opcode": "REX.W + 01 /r",
   "instr": "ADD r/m64, r64",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Add r64 to r/m64.",
   "page": 133
  },
  {
   "opcode": "02 /r",
   "instr": "ADD r8, r/m8",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Add r/m8 to r8.",
   "page": 133
  },
  {
   "opcode": "REX + 02 /r",
   "instr": "ADD r8*, r/m8*",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Add r/m8 to r8.",
   "page": 133
  },
  {
   "opcode": "03 /r",
   "instr": "ADD r16, r/m16",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Add r/m16 to r16.",
   "page": 133
  },
  {
   "opcode": "03 /r",
   "instr": "ADD r32, r/m32",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Add r/m32 to r32.",
   "page": 133
  },
  {
   "opcode": "REX.W + 03 /r",
   "instr": "ADD r64, r/m64",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Add r/m64 to r64.NOTES:*In 64-bit mode, r/m8 can not be encoded to access the following byte registers if a REX prefix is used: AH, BH, CH, DH. ",
   "page": 133
  },
  {
   "opcode": "F3 0F 38 F6 /r",
   "instr": "ADOX r32, r/m32",
   "op_en": "RM",
   "description": "Unsigned addition of r32 with OF, r/m32 to r32, writes OF.",
   "page": 150
  },
  {
   "opcode": "F3 REX.w 0F 38 F6 /r",
   "instr": "ADOX r64, r/m64",
   "op_en": "RM",
   "description": "Unsigned addition of r64 with OF, r/m64 to r64, writes OF.",
   "page": 150
  },
  {
   "opcode": "24 ib",
   "instr": "AND AL, imm8",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "   AL AND imm8.",
   "page": 163
  },
  {
   "opcode": "25 iw",
   "instr": "AND AX, imm16",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "   AX AND imm16.",
   "page": 163
  },
  {
   "opcode": "25 id",
   "instr": "AND EAX, imm32",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "   EAX AND imm32.",
   "page": 163
  },
  {
   "opcode": "REX.W + 25 id",
   "instr": "AND RAX, imm32",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "   RAX AND imm32 sign-extended to 64-bits.",
   "page": 163
  },
  {
   "opcode": "80 /4 ib",
   "instr": "AND r/m8, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "r/m8 AND imm8.",
   "page": 163
  },
  {
   "opcode": "REX + 80 /4 ib",
   "instr": "AND r/m8*, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "r/m8 AND imm8.",
   "page": 163
  },
  {
   "opcode": "81 /4 iw",
   "instr": "AND r/m16, imm16",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "r/m16 AND imm16.",
   "page": 163
  },
  {
   "opcode": "81 /4 id",
   "instr": "AND r/m32, imm32",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "r/m32 AND imm32.",
   "page": 163
  },
  {
   "opcode": "REX.W + 81 /4 id",
   "instr": "AND r/m64, imm32",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "r/m64 AND imm32 sign extended to 64-bits.",
   "page": 163
  },
  {
   "opcode": "83 /4 ib",
   "instr": "AND r/m16, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "r/m16 AND imm8 (sign-extended).",
   "page": 163
  },
  {
   "opcode": "83 /4 ib",
   "instr": "AND r/m32, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "r/m32 AND imm8 (sign-extended).",
   "page": 163
  },
  {
   "opcode": "REX.W + 83 /4 ib",
   "instr": "AND r/m64, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "r/m64 AND imm8 (sign-extended).",
   "page": 163
  },
  {
   "opcode": "20 /r",
   "instr": "AND r/m8, r8",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "r/m8 AND r8.",
   "page": 163
  },
  {
   "opcode": "REX + 20 /r",
   "instr": "AND r/m8*, r8*",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "r/m64 AND r8 (sign-extended).",
   "page": 163
  },
  {
   "opcode": "21 /r",
   "instr": "AND r/m16, r16",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "r/m16 AND r16.",
   "page": 163
  },
  {
   "opcode": "21 /r",
   "instr": "AND r/m32, r32",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "r/m32 AND r32.",
   "page": 163
  },
  {
   "opcode": "REX.W + 21 /r",
   "instr": "AND r/m64, r64",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "r/m64 AND r32.",
   "page": 163
  },
  {
   "opcode": "22 /r",
   "instr": "AND r8, r/m8",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "r8 AND r/m8.",
   "page": 163
  },
  {
   "opcode": "REX + 22 /r",
   "instr": "AND r8*, r/m8*",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "r/m64 AND r8 (sign-extended).",
   "page": 163
  },
  {
   "opcode": "23 /r",
   "instr": "AND r16, r/m16",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "r16 AND r/m16.",
   "page": 163
  },
  {
   "opcode": "23 /r",
   "instr": "AND r32, r/m32",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "r32 AND r/m32.",
   "page": 163
  },
  {
   "opcode": "REX.W + 23 /r",
   "instr": "AND r64, r/m64",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "r64 AND r/m64.NOTES:*In 64-bit mode, r/m8 can not be encoded to access the following byte registers if a REX prefix is used: AH, BH, CH, DH.",
   "page": 163
  },
  {
   "opcode": "63 /r",
   "instr": "ARPL r/m16, r16",
   "op_en": "MR",
   "valid_in_64": "N.E.",
   "compat_legacy": "Valid",
   "description": "Adjust RPL of r/m16 to not less than RPL of r16.",
   "page": 178
  },
  {
   "opcode": "62 /r",
   "instr": "BOUND r16, m16&amp;16",
   "op_en": "RM",
   "valid_in_64": "Invalid",
   "compat_legacy": "Valid",
   "description": "Check if r16 (array index) is within bounds specified by m16&amp;16.",
   "page": 208
  },
  {
   "opcode": "62 /r",
   "instr": "BOUND r32, m32&amp;32",
   "op_en": "RM",
   "valid_in_64": "Invalid",
   "compat_legacy": "Valid",
   "description": "Check if r32 (array index) is within bounds specified by m32&amp;32.",
   "page": 208
  },
  {
   "opcode": "0F BC /r",
   "instr": "BSF r16, r/m16",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Bit scan forward on r/m16.",
   "page": 210
  },
  {
   "opcode": "0F BC /r",
   "instr": "BSF r32, r/m32",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Bit scan forward on r/m32.",
   "page": 210
  },
  {
   "opcode": "REX.W + 0F BC /r",
   "instr": "BSF r64, r/m64",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Bit scan forward on r/m64.",
   "page": 210
  },
  {
   "opcode": "0F BD /r",
   "instr": "BSR r16, r/m16",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Bit scan reverse on r/m16.",
   "page": 212
  },
  {
   "opcode": "0F BD /r",
   "instr": "BSR r32, r/m32",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Bit scan reverse on r/m32.",
   "page": 212
  },
  {
   "opcode": "REX.W + 0F BD /r",
   "instr": "BSR r64, r/m64",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Bit scan reverse on r/m64.",
   "page": 212
  },
  {
   "opcode": "0F C8+rd",
   "instr": "BSWAP r32",
   "op_en": "O",
   "valid_in_64": "Valid*",
   "compat_legacy": "Valid",
   "description": "Reverses the byte order of a 32-bit register.",
   "page": 214
  },
  {
   "opcode": "REX.W + 0F C8+rd",
   "instr": "BSWAP r64",
   "op_en": "O",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Reverses the byte order of a 64-bit register.NOTES:* See IA-32 Architecture Compatibility section below.",
   "page": 214
  },
  {
   "opcode": "0F A3 /r",
   "instr": "BT r/m16, r16",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Store selected bit in CF flag.",
   "page": 215
  },
  {
   "opcode": "0F A3 /r",
   "instr": "BT r/m32, r32",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Store selected bit in CF flag.",
   "page": 215
  },
  {
   "opcode": "REX.W + 0F A3 /r",
   "instr": "BT r/m64, r64",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Store selected bit in CF flag.",
   "page": 215
  },
  {
   "opcode": "0F BA /4 ib BT ",
   "instr": "r/m16, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Store selected bit in CF flag.",
   "page": 215
  },
  {
   "opcode": "0F BA /4 ib",
   "instr": "BT r/m32, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Store selected bit in CF flag.",
   "page": 215
  },
  {
   "opcode": "REX.W + 0F BA /4 ib",
   "instr": "BT r/m64, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Store selected bit in CF flag.",
   "page": 215
  },
  {
   "opcode": "0F BB /r",
   "instr": "BTC r/m16, r16",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Store selected bit in CF flag and complement.",
   "page": 217
  },
  {
   "opcode": "0F BB /r",
   "instr": "BTC r/m32, r32",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Store selected bit in CF flag and complement.",
   "page": 217
  },
  {
   "opcode": "REX.W + 0F BB /r",
   "instr": "BTC r/m64, r64",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Store selected bit in CF flag and complement.",
   "page": 217
  },
  {
   "opcode": "0F BA /7 ib",
   "instr": "BTC r/m16, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Store selected bit in CF flag and complement.",
   "page": 217
  },
  {
   "opcode": "0F BA /7 ib",
   "instr": "BTC r/m32, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Store selected bit in CF flag and complement.",
   "page": 217
  },
  {
   "opcode": "REX.W + 0F BA /7 ib",
   "instr": "BTC r/m64, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Store selected bit in CF flag and complement.",
   "page": 217
  },
  {
   "opcode": "0F B3 /r",
   "instr": "BTR r/m16, r16",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Store selected bit in CF flag and clear.",
   "page": 219
  },
  {
   "opcode": "0F B3 /r",
   "instr": "BTR r/m32, r32",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Store selected bit in CF flag and clear.",
   "page": 219
  },
  {
   "opcode": "REX.W + 0F B3 /r",
   "instr": "BTR r/m64, r64",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Store selected bit in CF flag and clear.",
   "page": 219
  },
  {
   "opcode": "0F BA /6 ib",
   "instr": "BTR r/m16, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Store selected bit in CF flag and clear.",
   "page": 219
  },
  {
   "opcode": "0F BA /6 ib",
   "instr": "BTR r/m32, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Store selected bit in CF flag and clear.",
   "page": 219
  },
  {
   "opcode": "REX.W + 0F BA /6 ib",
   "instr": "BTR r/m64, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Store selected bit in CF flag and clear.",
   "page": 219
  },
  {
   "opcode": "0F AB /r",
   "instr": "BTS r/m16, r16",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Store selected bit in CF flag and set.",
   "page": 221
  },
  {
   "opcode": "0F AB /r",
   "instr": "BTS r/m32, r32",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Store selected bit in CF flag and set.",
   "page": 221
  },
  {
   "opcode": "REX.W + 0F AB /r",
   "instr": "BTS r/m64, r64",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Store selected bit in CF flag and set.",
   "page": 221
  },
  {
   "opcode": "0F BA /5 ib",
   "instr": "BTS r/m16, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Store selected bit in CF flag and set.",
   "page": 221
  },
  {
   "opcode": "0F BA /5 ib",
   "instr": "BTS r/m32, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Store selected bit in CF flag and set.",
   "page": 221
  },
  {
   "opcode": "REX.W + 0F BA /5 ib",
   "instr": "BTS r/m64, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Store selected bit in CF flag and set.",
   "page": 221
  },
  {
   "opcode": "E8 cw",
   "instr": "CALL rel16",
   "op_en": "D",
   "valid_in_64": "N.S.",
   "compat_legacy": "Valid",
   "description": "Call near, relative, displacement relative to next instruction.",
   "page": 224
  },
  {
   "opcode": "E8 cd",
   "instr": "CALL rel32",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Call near, relative, displacement relative to next instruction. 32-bit displacement sign extended to 64-bits in 64-bit mode.",
   "page": 224
  },
  {
   "opcode": "FF /2",
   "instr": "CALL r/m16",
   "op_en": "M",
   "valid_in_64": "N.E.",
   "compat_legacy": "Valid",
   "description": "Call near, absolute indirect, address given in r/m16. ",
   "page": 224
  },
  {
   "opcode": "FF /2",
   "instr": "CALL r/m32",
   "op_en": "M",
   "valid_in_64": "N.E.",
   "compat_legacy": "Valid",
   "description": "Call near, absolute indirect, address given in r/m32. ",
   "page": 224
  },
  {
   "opcode": "FF /2",
   "instr": "CALL r/m64",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Call near, absolute indirect, address given in r/m64.",
   "page": 224
  },
  {
   "opcode": "9A cd",
   "instr": "CALL ptr16:16",
   "op_en": "D",
   "valid_in_64": "Invalid",
   "compat_legacy": "Valid",
   "description": "Call far, absolute, address given in operand.",
   "page": 224
  },
  {
   "opcode": "9A cp",
   "instr": "CALL ptr16:32",
   "op_en": "D",
   "valid_in_64": "Invalid",
   "compat_legacy": "Valid",
   "description": "Call far, absolute, address given in operand.",
   "page": 224
  },
  {
   "opcode": "FF /3",
   "instr": "CALL m16:16",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Call far, absolute indirect address given in m16:16.In 32-bit mode: if selector points to a gate, then RIP = 32-bit zero extended displacement taken from gate; else RIP = zero extended 16-bit offset from far pointer referenced in the instruction.",
   "page": 224
  },
  {
   "opcode": "FF /3",
   "instr": "CALL m16:32",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "In 64-bit mode: If selector points to a gate, then RIP = 64-bit displacement taken from gate; else RIP = zero extended 32-bit offset from far pointer referenced in the instruction. ",
   "page": 224
  },
  {
   "opcode": "REX.W FF /3",
   "instr": "CALL m16:64",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "In 64-bit mode: If selector points to a gate, then RIP = 64-bit displacement taken from gate; else RIP = 64-bit offset from far pointer referenced in the instruction. ",
   "page": 224
  },
  {
   "opcode": "F8",
   "instr": "CLC",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Clear CF flag.",
   "page": 243
  },
  {
   "opcode": "FC",
   "instr": "CLD",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Clear DF flag.",
   "page": 244
  },
  {
   "opcode": "NP 0F AE /7",
   "instr": "CLFLUSH m8",
   "op_en": "M",
   "description": "Flushes cache line containing m8.",
   "page": 247
  },
  {
   "opcode": "FA",
   "instr": "CLI",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Clear interrupt flag; interrupts disabled when interrupt flag cleared.",
   "page": 251
  },
  {
   "opcode": "0F 06",
   "instr": "CLTS",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Clears TS flag in CR0.",
   "page": 255
  },
  {
   "opcode": "F5",
   "instr": "CMC",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Complement CF flag.",
   "page": 258
  },
  {
   "opcode": "0F 47 /r",
   "instr": "CMOVA r16, r/m16",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move if above (CF=0 and ZF=0).",
   "page": 259
  },
  {
   "opcode": "0F 47 /r",
   "instr": "CMOVA r32, r/m32",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move if above (CF=0 and ZF=0).",
   "page": 259
  },
  {
   "opcode": "REX.W + 0F 47 /r",
   "instr": "CMOVA r64, r/m64",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Move if above (CF=0 and ZF=0).",
   "page": 259
  },
  {
   "opcode": "0F 43 /r",
   "instr": "CMOVAE r16, r/m16",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move if above or equal (CF=0).",
   "page": 259
  },
  {
   "opcode": "0F 43 /r",
   "instr": "CMOVAE r32, r/m32",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move if above or equal (CF=0).",
   "page": 259
  },
  {
   "opcode": "REX.W + 0F 43 /r",
   "instr": "CMOVAE r64, r/m64",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Move if above or equal (CF=0).",
   "page": 259
  },
  {
   "opcode": "0F 42 /r",
   "instr": "CMOVB r16, r/m16",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move if below (CF=1).",
   "page": 259
  },
  {
   "opcode": "0F 42 /r",
   "instr": "CMOVB r32, r/m32",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move if below (CF=1).",
   "page": 259
  },
  {
   "opcode": "REX.W + 0F 42 /r",
   "instr": "CMOVB r64, r/m64",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Move if below (CF=1).",
   "page": 259
  },
  {
   "opcode": "0F 46 /r",
   "instr": "CMOVBE r16, r/m16",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move if below or equal (CF=1 or ZF=1).",
   "page": 259
  },
  {
   "opcode": "0F 46 /r",
   "instr": "CMOVBE r32, r/m32",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move if below or equal (CF=1 or ZF=1).",
   "page": 259
  },
  {
   "opcode": "REX.W + 0F 46 /r",
   "instr": "CMOVBE r64, r/m64",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Move if below or equal (CF=1 or ZF=1).",
   "page": 259
  },
  {
   "opcode": "0F 42 /r",
   "instr": "CMOVC r16, r/m16",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move if carry (CF=1).",
   "page": 259
  },
  {
   "opcode": "0F 42 /r",
   "instr": "CMOVC r32, r/m32",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move if carry (CF=1).",
   "page": 259
  },
  {
   "opcode": "REX.W + 0F 42 /r",
   "instr": "CMOVC r64, r/m64",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Move if carry (CF=1).",
   "page": 259
  },
  {
   "opcode": "0F 44 /r",
   "instr": "CMOVE r16, r/m16",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move if equal (ZF=1).",
   "page": 259
  },
  {
   "opcode": "0F 44 /r",
   "instr": "CMOVE r32, r/m32",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move if equal (ZF=1).",
   "page": 259
  },
  {
   "opcode": "REX.W + 0F 44 /r",
   "instr": "CMOVE r64, r/m64",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Move if equal (ZF=1).",
   "page": 259
  },
  {
   "opcode": "0F 4F /r",
   "instr": "CMOVG r16, r/m16",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move if greater (ZF=0 and SF=OF).",
   "page": 259
  },
  {
   "opcode": "0F 4F /r",
   "instr": "CMOVG r32, r/m32",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move if greater (ZF=0 and SF=OF).",
   "page": 259
  },
  {
   "opcode": "REX.W + 0F 4F /r",
   "instr": "CMOVG r64, r/m64",
   "op_en": "RM",
   "valid_in_64": "V/N.E.",
   "compat_legacy": "NA",
   "description": "Move if greater (ZF=0 and SF=OF).",
   "page": 259
  },
  {
   "opcode": "0F 4D /r",
   "instr": "CMOVGE r16, r/m16",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move if greater or equal (SF=OF).",
   "page": 259
  },
  {
   "opcode": "0F 4D /r",
   "instr": "CMOVGE r32, r/m32",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move if greater or equal (SF=OF).",
   "page": 259
  },
  {
   "opcode": "REX.W + 0F 4D /r",
   "instr": "CMOVGE r64, r/m64",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Move if greater or equal (SF=OF).",
   "page": 259
  },
  {
   "opcode": "0F 4C /r",
   "instr": "CMOVL r16, r/m16",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move if less (SF≠ OF).",
   "page": 259
  },
  {
   "opcode": "0F 4C /r",
   "instr": "CMOVL r32, r/m32",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move if less (SF≠ OF).",
   "page": 259
  },
  {
   "opcode": "REX.W + 0F 4C /r",
   "instr": "CMOVL r64, r/m64",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Move if less (SF≠ OF).",
   "page": 259
  },
  {
   "opcode": "0F 4E /r",
   "instr": "CMOVLE r16, r/m16",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move if less or equal (ZF=1 or SF≠ OF).",
   "page": 259
  },
  {
   "opcode": "0F 4E /r",
   "instr": "CMOVLE r32, r/m32",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move if less or equal (ZF=1 or SF≠ OF).",
   "page": 259
  },
  {
   "opcode": "REX.W + 0F 4E /r",
   "instr": "CMOVLE r64, r/m64",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Move if less or equal (ZF=1 or SF≠ OF).",
   "page": 259
  },
  {
   "opcode": "0F 46 /r",
   "instr": "CMOVNA r16, r/m16",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move if not above (CF=1 or ZF=1).",
   "page": 259
  },
  {
   "opcode": "0F 46 /r",
   "instr": "CMOVNA r32, r/m32",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move if not above (CF=1 or ZF=1).",
   "page": 259
  },
  {
   "opcode": "REX.W + 0F 46 /r",
   "instr": "CMOVNA r64, r/m64",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Move if not above (CF=1 or ZF=1).",
   "page": 259
  },
  {
   "opcode": "0F 42 /r",
   "instr": "CMOVNAE r16, r/m16",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move if not above or equal (CF=1).",
   "page": 259
  },
  {
   "opcode": "0F 42 /r",
   "instr": "CMOVNAE r32, r/m32",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move if not above or equal (CF=1).",
   "page": 259
  },
  {
   "opcode": "REX.W + 0F 42 /r",
   "instr": "CMOVNAE r64, r/m64",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Move if not above or equal (CF=1).",
   "page": 259
  },
  {
   "opcode": "0F 43 /r",
   "instr": "CMOVNB r16, r/m16",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move if not below (CF=0).",
   "page": 259
  },
  {
   "opcode": "0F 43 /r",
   "instr": "CMOVNB r32, r/m32",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move if not below (CF=0).",
   "page": 259
  },
  {
   "opcode": "REX.W + 0F 43 /r",
   "instr": "CMOVNB r64, r/m64",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Move if not below (CF=0).",
   "page": 259
  },
  {
   "opcode": "0F 47 /r",
   "instr": "CMOVNBE r16, r/m16",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move if not below or equal (CF=0 and ZF=0).CMOVcc—Conditional MoveVol. 2A 3-157<hr/>",
   "page": 259
  },
  {
   "opcode": "3C ib",
   "instr": "CMP AL, imm8",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Compare imm8 with AL.",
   "page": 263
  },
  {
   "opcode": "3D iw",
   "instr": "CMP AX, imm16",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Compare imm16 with AX.",
   "page": 263
  },
  {
   "opcode": "3D id",
   "instr": "CMP EAX, imm32",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Compare imm32 with EAX.",
   "page": 263
  },
  {
   "opcode": "REX.W + 3D id",
   "instr": "CMP RAX, imm32",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Compare imm32 sign-extended to 64-bits with RAX.",
   "page": 263
  },
  {
   "opcode": "80 /7 ib",
   "instr": "CMP r/m8, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Compare imm8 with r/m8.",
   "page": 263
  },
  {
   "opcode": "REX + 80 /7 ib",
   "instr": "CMP r/m8*, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Compare imm8 with r/m8.",
   "page": 263
  },
  {
   "opcode": "81 /7 iw",
   "instr": "CMP r/m16, imm16",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Compare imm16 with r/m16.",
   "page": 263
  },
  {
   "opcode": "81 /7 id",
   "instr": "CMP r/m32, imm32",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Compare imm32 with r/m32.",
   "page": 263
  },
  {
   "opcode": "REX.W + 81 /7 id",
   "instr": "CMP r/m64, imm32",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Compare imm32 sign-extended to 64-bits with r/m64.",
   "page": 263
  },
  {
   "opcode": "83 /7 ib",
   "instr": "CMP r/m16, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Compare imm8 with r/m16.",
   "page": 263
  },
  {
   "opcode": "83 /7 ib",
   "instr": "CMP r/m32, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Compare imm8 with r/m32.",
   "page": 263
  },
  {
   "opcode": "REX.W + 83 /7 ib",
   "instr": "CMP r/m64, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Compare imm8 with r/m64.",
   "page": 263
  },
  {
   "opcode": "38 /r",
   "instr": "CMP r/m8, r8",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Compare r8 with r/m8.",
   "page": 263
  },
  {
   "opcode": "REX + 38 /r",
   "instr": "CMP r/m8*, r8*",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Compare r8 with r/m8.",
   "page": 263
  },
  {
   "opcode": "39 /r",
   "instr": "CMP r/m16, r16",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Compare r16 with r/m16.",
   "page": 263
  },
  {
   "opcode": "39 /r",
   "instr": "CMP r/m32, r32",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Compare r32 with r/m32.",
   "page": 263
  },
  {
   "opcode": "REX.W + 39 /r",
   "instr": "CMP r/m64,r64",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Compare r64 with r/m64.",
   "page": 263
  },
  {
   "opcode": "3A /r",
   "instr": "CMP r8, r/m8",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Compare r/m8 with r8.",
   "page": 263
  },
  {
   "opcode": "REX + 3A /r",
   "instr": "CMP r8*, r/m8*",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Compare r/m8 with r8.",
   "page": 263
  },
  {
   "opcode": "3B /r",
   "instr": "CMP r16, r/m16",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Compare r/m16 with r16.",
   "page": 263
  },
  {
   "opcode": "3B /r",
   "instr": "CMP r32, r/m32",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Compare r/m32 with r32.",
   "page": 263
  },
  {
   "opcode": "REX.W + 3B /r",
   "instr": "CMP r64, r/m64",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Compare r/m64 with r64.NOTES:* In 64-bit mode, r/m8 can not be encoded to access the following byte registers if a REX prefix is used: AH, BH, CH, DH. ",
   "page": 263
  },
  {
   "opcode": "A6",
   "instr": "CMPS m8, m8",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "For legacy mode, compare byte at address DS:(E)SI with byte at address ES:(E)DI; For 64-bit mode compare byte at address (R|E)SI to byte at address (R|E)DI. The status flags are set accordingly.",
   "page": 279
  },
  {
   "opcode": "A7",
   "instr": "CMPS m16, m16",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "For legacy mode, compare word at address DS:(E)SI with word at address ES:(E)DI; For 64-bit mode compare word at address (R|E)SI with word at address (R|E)DI. The status flags are set accordingly.",
   "page": 279
  },
  {
   "opcode": "A7",
   "instr": "CMPS m32, m32",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "For legacy mode, compare dword at address DS:(E)SI at dword at address ES:(E)DI; For 64-bit mode compare dword at address (R|E)SI at dword at address (R|E)DI. The status flags are set accordingly.",
   "page": 279
  },
  {
   "opcode": "REX.W + A7",
   "instr": "CMPS m64, m64",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Compares quadword at address (R|E)SI with quadword at address (R|E)DI and sets the status flags accordingly.",
   "page": 279
  },
  {
   "opcode": "A6",
   "instr": "CMPSB",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "For legacy mode, compare byte at address DS:(E)SI with byte at address ES:(E)DI; For 64-bit mode compare byte at address (R|E)SI with byte at address (R|E)DI. The status flags are set accordingly.",
   "page": 279
  },
  {
   "opcode": "A7",
   "instr": "CMPSW",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "For legacy mode, compare word at address DS:(E)SI with word at address ES:(E)DI; For 64-bit mode compare word at address (R|E)SI with word at address (R|E)DI. The status flags are set accordingly.",
   "page": 279
  },
  {
   "opcode": "A7",
   "instr": "CMPSD",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "For legacy mode, compare dword at address DS:(E)SI with dword at address ES:(E)DI; For 64-bit mode compare dword at address (R|E)SI with dword at address (R|E)DI. The status flags are set accordingly.",
   "page": 279
  },
  {
   "opcode": "REX.W + A7",
   "instr": "CMPSQ",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Compares quadword at address (R|E)SI with quadword at address (R|E)DI and sets the status flags accordingly.",
   "page": 279
  },
  {
   "opcode": "0F A2",
   "instr": "CPUID",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Returns processor identification and feature information to the EAX, EBX, ECX, and EDX registers, as determined by input entered in EAX (in some cases, ECX as well).",
   "page": 300
  },
  {
   "opcode": "99",
   "instr": "CWD",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "DX:AX := sign-extend of AX.",
   "page": 393
  },
  {
   "opcode": "99",
   "instr": "CDQ",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "EDX:EAX := sign-extend of EAX.",
   "page": 393
  },
  {
   "opcode": "REX.W + 99",
   "instr": "CQO",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "RDX:RAX:= sign-extend of RAX.",
   "page": 393
  },
  {
   "opcode": "27",
   "instr": "DAA",
   "op_en": "ZO",
   "valid_in_64": "Invalid",
   "compat_legacy": "Valid",
   "description": "Decimal adjust AL after addition.",
   "page": 394
  },
  {
   "opcode": "2F",
   "instr": "DAS",
   "op_en": "ZO",
   "valid_in_64": "Invalid",
   "compat_legacy": "Valid",
   "description": "Decimal adjust AL after subtraction.",
   "page": 396
  },
  {
   "opcode": "FE /1",
   "instr": "DEC r/m8",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Decrement r/m8 by 1.",
   "page": 398
  },
  {
   "opcode": "REX + FE /1",
   "instr": "DEC r/m8*",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Decrement r/m8 by 1.",
   "page": 398
  },
  {
   "opcode": "FF /1",
   "instr": "DEC r/m16",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Decrement r/m16 by 1.",
   "page": 398
  },
  {
   "opcode": "FF /1",
   "instr": "DEC r/m32",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Decrement r/m32 by 1.",
   "page": 398
  },
  {
   "opcode": "REX.W + FF /1",
   "instr": "DEC r/m64",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Decrement r/m64 by 1.48+rwDEC r16ON.E.ValidDecrement r16 by 1.48+rdDEC r32ON.E.ValidDecrement r32 by 1.NOTES:* In 64-bit mode, r/m8 can not be encoded to access the following byte registers if a REX prefix is used: AH, BH, CH, DH. ",
   "page": 398
  },
  {
   "opcode": "F6 /6",
   "instr": "DIV r/m8",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Unsigned divide AX by r/m8, with result stored in AL := Quotient, AH := Remainder.",
   "page": 400
  },
  {
   "opcode": "REX + F6 /6",
   "instr": "DIV r/m8*",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Unsigned divide AX by r/m8, with result stored in AL := Quotient, AH := Remainder.",
   "page": 400
  },
  {
   "opcode": "F7 /6",
   "instr": "DIV r/m16",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Unsigned divide DX:AX by r/m16, with result stored in AX := Quotient, DX := Remainder.",
   "page": 400
  },
  {
   "opcode": "F7 /6",
   "instr": "DIV r/m32",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Unsigned divide EDX:EAX by r/m32, with result stored in EAX := Quotient, EDX := Remainder.",
   "page": 400
  },
  {
   "opcode": "REX.W + F7 /6",
   "instr": "DIV r/m64",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Unsigned divide RDX:RAX by r/m64, with result stored in RAX := Quotient, RDX := Remainder.NOTES:* In 64-bit mode, r/m8 can not be encoded to access the following byte registers if a REX prefix is used: AH, BH, CH, DH.",
   "page": 400
  },
  {
   "opcode": "NP 0F 77",
   "instr": "EMMS",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Set the x87 FPU tag word to empty.",
   "page": 418
  },
  {
   "opcode": "C8 iw 00",
   "instr": "ENTER imm16, 0",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Create a stack frame for a procedure.",
   "page": 421
  },
  {
   "opcode": "C8 iw 01",
   "instr": "ENTER imm16,1",
   "op_en": "II",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Create a stack frame with a nested pointer for a procedure.",
   "page": 421
  },
  {
   "opcode": "C8 iw ib",
   "instr": "ENTER imm16, imm8",
   "op_en": "II",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Create a stack frame with nested pointers for a procedure.",
   "page": 421
  },
  {
   "opcode": "F4",
   "instr": "HLT",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Halt",
   "page": 557
  },
  {
   "opcode": "F6 /7",
   "instr": "IDIV r/m8",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Signed divide AX by r/m8, with result stored in: AL := Quotient, AH := Remainder.",
   "page": 564
  },
  {
   "opcode": "REX + F6 /7",
   "instr": "IDIV r/m8*",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Signed divide AX by r/m8, with result stored in AL := Quotient, AH := Remainder.",
   "page": 564
  },
  {
   "opcode": "F7 /7",
   "instr": "IDIV r/m16",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Signed divide DX:AX by r/m16, with result stored in AX := Quotient, DX := Remainder.",
   "page": 564
  },
  {
   "opcode": "F7 /7",
   "instr": "IDIV r/m32",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Signed divide EDX:EAX by r/m32, with result stored in EAX := Quotient, EDX := Remainder.",
   "page": 564
  },
  {
   "opcode": "REX.W + F7 /7",
   "instr": "IDIV r/m64",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Signed divide RDX:RAX by r/m64, with result stored in RAX := Quotient, RDX := Remainder.NOTES:* In 64-bit mode, r/m8 can not be encoded to access the following byte registers if a REX prefix is used: AH, BH, CH, DH. ",
   "page": 564
  },
  {
   "opcode": "E4 ib",
   "instr": "IN AL, imm8",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Input byte from imm8 I/O port address into AL.",
   "page": 571
  },
  {
   "opcode": "E5 ib",
   "instr": "IN AX, imm8",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Input word from imm8 I/O port address into AX.",
   "page": 571
  },
  {
   "opcode": "E5 ib",
   "instr": "IN EAX, imm8",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Input dword from imm8 I/O port address into EAX.",
   "page": 571
  },
  {
   "opcode": "EC",
   "instr": "IN AL,DX",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Input byte from I/O port in DX into AL.",
   "page": 571
  },
  {
   "opcode": "ED",
   "instr": "IN AX,DX",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Input word from I/O port in DX into AX.",
   "page": 571
  },
  {
   "opcode": "ED",
   "instr": "IN EAX,DX",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Input doubleword from I/O port in DX into EAX.",
   "page": 571
  },
  {
   "opcode": "FE /0",
   "instr": "INC r/m8",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Increment r/m byte by 1.",
   "page": 573
  },
  {
   "opcode": "REX + FE /0",
   "instr": "INC r/m8*",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Increment r/m byte by 1.",
   "page": 573
  },
  {
   "opcode": "FF /0",
   "instr": "INC r/m16",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Increment r/m word by 1.",
   "page": 573
  },
  {
   "opcode": "FF /0",
   "instr": "INC r/m32",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Increment r/m doubleword by 1.",
   "page": 573
  },
  {
   "opcode": "REX.W + FF /0",
   "instr": "INC r/m64",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Increment r/m quadword by 1.40+ rw**INC r16ON.E.ValidIncrement word register by 1.40+ rdINC r32ON.E.ValidIncrement doubleword register by 1.NOTES:* In 64-bit mode, r/m8 can not be encoded to access the following byte registers if a REX prefix is used: AH, BH, CH, DH.** 40H through 47H are REX prefixes in 64-bit mode.",
   "page": 573
  },
  {
   "opcode": "6C",
   "instr": "INS m8, DX ",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Input byte from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.*",
   "page": 577
  },
  {
   "opcode": "6D",
   "instr": "INS m16, DX",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Input word from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.1",
   "page": 577
  },
  {
   "opcode": "6D",
   "instr": "INS m32, DX",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Input doubleword from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.1",
   "page": 577
  },
  {
   "opcode": "6C",
   "instr": "INSB",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Input byte from I/O port specified in DX into memory location specified with ES:(E)DI or RDI.1",
   "page": 577
  },
  {
   "opcode": "6D",
   "instr": "INSW",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Input word from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.1",
   "page": 577
  },
  {
   "opcode": "6D",
   "instr": "INSD",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Input doubleword from I/O port specified in DX into memory location specified in ES:(E)DI or RDI.1NOTES:* In 64-bit mode, only 64-bit (RDI) and 32-bit (EDI) address sizes are supported. In non-64-bit mode, only 32-bit (EDI) and 16-bit (DI) address sizes are supported.",
   "page": 577
  },
  {
   "opcode": "CC",
   "instr": "INT3",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Generate breakpoint trap.",
   "page": 583
  },
  {
   "opcode": "CD ib",
   "instr": "INT imm8",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Generate software interrupt with vector specified by immediate byte.",
   "page": 583
  },
  {
   "opcode": "CE",
   "instr": "INTO",
   "op_en": "ZO",
   "valid_in_64": "Invalid",
   "compat_legacy": "Valid",
   "description": "Generate overflow trap if overflow flag is 1.",
   "page": 583
  },
  {
   "opcode": "F1",
   "instr": "INT1",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Generate debug trap.",
   "page": 583
  },
  {
   "opcode": "0F 08",
   "instr": "INVD",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Flush internal caches; initiate flushing of external caches.NOTES:* See the IA-32 Architecture Compatibility section below.",
   "page": 598
  },
  {
   "opcode": "0F 01/7",
   "instr": "INVLPG m",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Invalidate TLB entries for page containing m.NOTES:* See the IA-32 Architecture Compatibility section below.",
   "page": 600
  },
  {
   "opcode": "CF",
   "instr": "IRET",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Interrupt return (16-bit operand size).",
   "page": 605
  },
  {
   "opcode": "CF",
   "instr": "IRETD",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Interrupt return (32-bit operand size).",
   "page": 605
  },
  {
   "opcode": "REX.W + CF",
   "instr": "IRETQ",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Interrupt return (64-bit operand size).",
   "page": 605
  },
  {
   "opcode": "77 cb",
   "instr": "JA rel8 ",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Jump short if above (CF=0 and ZF=0).",
   "page": 614
  },
  {
   "opcode": "73 cb",
   "instr": "JAE rel8",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Jump short if above or equal (CF=0).",
   "page": 614
  },
  {
   "opcode": "72 cb",
   "instr": "JB rel8",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Jump short if below (CF=1).",
   "page": 614
  },
  {
   "opcode": "76 cb",
   "instr": "JBE rel8",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Jump short if below or equal (CF=1 or ZF=1).",
   "page": 614
  },
  {
   "opcode": "72 cb",
   "instr": "JC rel8",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Jump short if carry (CF=1).",
   "page": 614
  },
  {
   "opcode": "E3 cb",
   "instr": "JCXZ rel8",
   "op_en": "D",
   "valid_in_64": "N.E.",
   "compat_legacy": "Valid",
   "description": "Jump short if CX register is 0.",
   "page": 614
  },
  {
   "opcode": "E3 cb",
   "instr": "JECXZ rel8",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Jump short if ECX register is 0.",
   "page": 614
  },
  {
   "opcode": "E3 cb",
   "instr": "JRCXZ rel8",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Jump short if RCX register is 0.",
   "page": 614
  },
  {
   "opcode": "74 cb",
   "instr": "JE rel8",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Jump short if equal (ZF=1).",
   "page": 614
  },
  {
   "opcode": "7F cb",
   "instr": "JG rel8",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Jump short if greater (ZF=0 and SF=OF).",
   "page": 614
  },
  {
   "opcode": "7D cb",
   "instr": "JGE rel8",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Jump short if greater or equal (SF=OF).",
   "page": 614
  },
  {
   "opcode": "7C cb",
   "instr": "JL rel8",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Jump short if less (SF≠ OF).",
   "page": 614
  },
  {
   "opcode": "7E cb",
   "instr": "JLE rel8",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Jump short if less or equal (ZF=1 or SF≠ OF).",
   "page": 614
  },
  {
   "opcode": "76 cb",
   "instr": "JNA rel8",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Jump short if not above (CF=1 or ZF=1).",
   "page": 614
  },
  {
   "opcode": "72 cb",
   "instr": "JNAE rel8",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Jump short if not above or equal (CF=1).",
   "page": 614
  },
  {
   "opcode": "73 cb",
   "instr": "JNB rel8",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Jump short if not below (CF=0).",
   "page": 614
  },
  {
   "opcode": "77 cb",
   "instr": "JNBE rel8",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Jump short if not below or equal (CF=0 and ZF=0).",
   "page": 614
  },
  {
   "opcode": "73 cb",
   "instr": "JNC rel8",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Jump short if not carry (CF=0).",
   "page": 614
  },
  {
   "opcode": "75 cb",
   "instr": "JNE rel8",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Jump short if not equal (ZF=0).",
   "page": 614
  },
  {
   "opcode": "7E cb",
   "instr": "JNG rel8",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Jump short if not greater (ZF=1 or SF≠ OF).",
   "page": 614
  },
  {
   "opcode": "7C cb",
   "instr": "JNGE rel8",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Jump short if not greater or equal (SF≠ OF).",
   "page": 614
  },
  {
   "opcode": "7D cb",
   "instr": "JNL rel8",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Jump short if not less (SF=OF).",
   "page": 614
  },
  {
   "opcode": "7F cb",
   "instr": "JNLE rel8",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Jump short if not less or equal (ZF=0 and SF=OF).",
   "page": 614
  },
  {
   "opcode": "71 cb",
   "instr": "JNO rel8",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Jump short if not overflow (OF=0).",
   "page": 614
  },
  {
   "opcode": "7B cb",
   "instr": "JNP rel8",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Jump short if not parity (PF=0).",
   "page": 614
  },
  {
   "opcode": "79 cb",
   "instr": "JNS rel8",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Jump short if not sign (SF=0).",
   "page": 614
  },
  {
   "opcode": "75 cb",
   "instr": "JNZ rel8",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Jump short if not zero (ZF=0).",
   "page": 614
  },
  {
   "opcode": "70 cb",
   "instr": "JO rel8",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Jump short if overflow (OF=1).",
   "page": 614
  },
  {
   "opcode": "7A cb",
   "instr": "JP rel8",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Jump short if parity (PF=1).",
   "page": 614
  },
  {
   "opcode": "7A cb",
   "instr": "JPE rel8",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Jump short if parity even (PF=1).",
   "page": 614
  },
  {
   "opcode": "7B cb",
   "instr": "JPO rel8",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Jump short if parity odd (PF=0).",
   "page": 614
  },
  {
   "opcode": "78 cb",
   "instr": "JS rel8",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Jump short if sign (SF=1).",
   "page": 614
  },
  {
   "opcode": "74 cb",
   "instr": "JZ rel8",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Jump short if zero (ZF = 1).",
   "page": 614
  },
  {
   "opcode": "0F 87 cw",
   "instr": "JA rel16",
   "op_en": "D",
   "valid_in_64": "N.S.",
   "compat_legacy": "Valid",
   "description": "Jump near if above (CF=0 and ZF=0). Not supported in 64-bit mode.",
   "page": 614
  },
  {
   "opcode": "0F 87 cd",
   "instr": "JA rel32",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Jump near if above (CF=0 and ZF=0).",
   "page": 614
  },
  {
   "opcode": "0F 83 cw",
   "instr": "JAE rel16",
   "op_en": "D",
   "valid_in_64": "N.S.",
   "compat_legacy": "Valid",
   "description": "Jump near if above or equal (CF=0). Not supported in 64-bit mode.3-512 Vol. 2AJcc—Jump if Condition Is Met<hr/>",
   "page": 614
  },
  {
   "opcode": "0F 02 /r",
   "instr": "LAR r16, r16/m16",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "r16 := access rights referenced by r16/m16",
   "page": 647
  },
  {
   "opcode": "0F 02 /r",
   "instr": "LAR reg, r32/m161",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "reg := access rights referenced by r32/m16NOTES:1. For all loads (regardless of source or destination sizing) only bits 16-0 are used. Other bits are ignored.",
   "page": 647
  },
  {
   "opcode": "C5 /r",
   "instr": "LDS r16,m16:16",
   "op_en": "RM",
   "valid_in_64": "Invalid",
   "compat_legacy": "Valid",
   "description": "Load DS:r16 with far pointer from memory.",
   "page": 653
  },
  {
   "opcode": "C5 /r",
   "instr": "LDS r32,m16:32",
   "op_en": "RM",
   "valid_in_64": "Invalid",
   "compat_legacy": "Valid",
   "description": "Load DS:r32 with far pointer from memory.",
   "page": 653
  },
  {
   "opcode": "0F B2 /r",
   "instr": "LSS r16,m16:16",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Load SS:r16 with far pointer from memory.",
   "page": 653
  },
  {
   "opcode": "0F B2 /r",
   "instr": "LSS r32,m16:32",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Load SS:r32 with far pointer from memory.",
   "page": 653
  },
  {
   "opcode": "REX + 0F B2 /r",
   "instr": "LSS r64,m16:64",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Load SS:r64 with far pointer from memory.",
   "page": 653
  },
  {
   "opcode": "C4 /r",
   "instr": "LES r16,m16:16",
   "op_en": "RM",
   "valid_in_64": "Invalid",
   "compat_legacy": "Valid",
   "description": "Load ES:r16 with far pointer from memory.",
   "page": 653
  },
  {
   "opcode": "C4 /r",
   "instr": "LES r32,m16:32",
   "op_en": "RM",
   "valid_in_64": "Invalid",
   "compat_legacy": "Valid",
   "description": "Load ES:r32 with far pointer from memory.",
   "page": 653
  },
  {
   "opcode": "0F B4 /r",
   "instr": "LFS r16,m16:16",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Load FS:r16 with far pointer from memory.",
   "page": 653
  },
  {
   "opcode": "0F B4 /r",
   "instr": "LFS r32,m16:32",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Load FS:r32 with far pointer from memory.",
   "page": 653
  },
  {
   "opcode": "REX + 0F B4 /r",
   "instr": "LFS r64,m16:64",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Load FS:r64 with far pointer from memory.",
   "page": 653
  },
  {
   "opcode": "0F B5 /r",
   "instr": "LGS r16,m16:16",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Load GS:r16 with far pointer from memory.",
   "page": 653
  },
  {
   "opcode": "0F B5 /r",
   "instr": "LGS r32,m16:32",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Load GS:r32 with far pointer from memory.",
   "page": 653
  },
  {
   "opcode": "REX + 0F B5 /r",
   "instr": "LGS r64,m16:64",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Load GS:r64 with far pointer from memory.",
   "page": 653
  },
  {
   "opcode": "8D /r",
   "instr": "LEA r16,m",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Store effective address for m in register r16.",
   "page": 657
  },
  {
   "opcode": "8D /r",
   "instr": "LEA r32,m",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Store effective address for m in register r32.",
   "page": 657
  },
  {
   "opcode": "REX.W + 8D /r",
   "instr": "LEA r64,m",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Store effective address for m in register r64. ",
   "page": 657
  },
  {
   "opcode": "C9",
   "instr": "LEAVE",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Set SP to BP, then pop BP.",
   "page": 659
  },
  {
   "opcode": "C9",
   "instr": "LEAVE",
   "op_en": "ZO",
   "valid_in_64": "N.E.",
   "compat_legacy": "Valid",
   "description": "Set ESP to EBP, then pop EBP.",
   "page": 659
  },
  {
   "opcode": "C9",
   "instr": "LEAVE",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Set RSP to RBP, then pop RBP.",
   "page": 659
  },
  {
   "opcode": "0F 01 /2",
   "instr": "LGDT m16&amp;32",
   "op_en": "M",
   "valid_in_64": "N.E.",
   "compat_legacy": "Valid",
   "description": "Load m into GDTR.",
   "page": 662
  },
  {
   "opcode": "0F 01 /3",
   "instr": "LIDT m16&amp;32",
   "op_en": "M",
   "valid_in_64": "N.E.",
   "compat_legacy": "Valid",
   "description": "Load m into IDTR.",
   "page": 662
  },
  {
   "opcode": "0F 01 /2",
   "instr": "LGDT m16&amp;64",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Load m into GDTR.",
   "page": 662
  },
  {
   "opcode": "0F 01 /3",
   "instr": "LIDT m16&amp;64",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Load m into IDTR.",
   "page": 662
  },
  {
   "opcode": "0F 00 /2",
   "instr": "LLDT r/m16",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Load segment selector r/m16 into LDTR.",
   "page": 665
  },
  {
   "opcode": "0F 01 /6",
   "instr": "LMSW r/m16",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Loads r/m16 in machine status word of CR0.",
   "page": 667
  },
  {
   "opcode": "F0",
   "instr": "LOCK",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Asserts LOCK# signal for duration of the accompanying instruction.NOTES:* See IA-32 Architecture Compatibility section below.",
   "page": 669
  },
  {
   "opcode": "AC",
   "instr": "LODS m8",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "For legacy mode, Load byte at address DS:(E)SI into AL. For 64-bit mode load byte at address (R)SI into AL.",
   "page": 671
  },
  {
   "opcode": "AD",
   "instr": "LODS m16",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "For legacy mode, Load word at address DS:(E)SI into AX. For 64-bit mode load word at address (R)SI into AX.",
   "page": 671
  },
  {
   "opcode": "AD",
   "instr": "LODS m32",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "For legacy mode, Load dword at address DS:(E)SI into EAX. For 64-bit mode load dword at address (R)SI into EAX.",
   "page": 671
  },
  {
   "opcode": "REX.W + AD",
   "instr": "LODS m64",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Load qword at address (R)SI into RAX.",
   "page": 671
  },
  {
   "opcode": "AC",
   "instr": "LODSB",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "For legacy mode, Load byte at address DS:(E)SI into AL. For 64-bit mode load byte at address (R)SI into AL.",
   "page": 671
  },
  {
   "opcode": "AD",
   "instr": "LODSW",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "For legacy mode, Load word at address DS:(E)SI into AX. For 64-bit mode load word at address (R)SI into AX.",
   "page": 671
  },
  {
   "opcode": "AD",
   "instr": "LODSD",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "For legacy mode, Load dword at address DS:(E)SI into EAX. For 64-bit mode load dword at address (R)SI into EAX.",
   "page": 671
  },
  {
   "opcode": "REX.W + AD",
   "instr": "LODSQ",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Load qword at address (R)SI into RAX.",
   "page": 671
  },
  {
   "opcode": "E2 cb",
   "instr": "LOOP rel8",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Decrement count; jump short if count ≠ 0.",
   "page": 674
  },
  {
   "opcode": "E1 cb",
   "instr": "LOOPE rel8",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Decrement count; jump short if count ≠ 0 and ZF = 1.",
   "page": 674
  },
  {
   "opcode": "E0 cb",
   "instr": "LOOPNE rel8",
   "op_en": "D",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Decrement count; jump short if count ≠ 0 and ZF = 0.",
   "page": 674
  },
  {
   "opcode": "0F 03 /r",
   "instr": "LSL r16, r16/m16",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Load: r16 := segment limit, selector r16/m16.",
   "page": 676
  },
  {
   "opcode": "0F 03 /r",
   "instr": "LSL r32, r32/m16*",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Load: r32 := segment limit, selector r32/m16.",
   "page": 676
  },
  {
   "opcode": "REX.W + 0F 03 /r",
   "instr": "LSL r64, r32/m16*",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Load: r64 := segment limit, selector r32/m16NOTES:* For all loads (regardless of destination sizing), only bits 16-0 are used. Other bits are ignored.",
   "page": 676
  },
  {
   "opcode": "0F 00 /3",
   "instr": "LTR r/m16",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Load r/m16 into task register.",
   "page": 679
  },
  {
   "opcode": "0F 01 C8",
   "instr": "MONITOR",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Sets up a linear address range to be monitored by hardware and activates the monitor. The address range should be a write-back memory caching type. The address is DS:RAX/EAX/AX.",
   "page": 715
  },
  {
   "opcode": "88 /r",
   "instr": "MOV r/m8,r8",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move r8 to r/m8.",
   "page": 717
  },
  {
   "opcode": "REX + 88 /r",
   "instr": "MOV r/m8***,r8***",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Move r8 to r/m8.",
   "page": 717
  },
  {
   "opcode": "89 /r",
   "instr": "MOV r/m16,r16",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move r16 to r/m16.",
   "page": 717
  },
  {
   "opcode": "89 /r",
   "instr": "MOV r/m32,r32",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move r32 to r/m32.",
   "page": 717
  },
  {
   "opcode": "REX.W + 89 /r",
   "instr": "MOV r/m64,r64",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Move r64 to r/m64.",
   "page": 717
  },
  {
   "opcode": "8A /r",
   "instr": "MOV r8,r/m8",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move r/m8 to r8.",
   "page": 717
  },
  {
   "opcode": "REX + 8A /r",
   "instr": "MOV r8***,r/m8***",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Move r/m8 to r8.",
   "page": 717
  },
  {
   "opcode": "8B /r",
   "instr": "MOV r16,r/m16",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move r/m16 to r16.",
   "page": 717
  },
  {
   "opcode": "8B /r",
   "instr": "MOV r32,r/m32",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move r/m32 to r32.",
   "page": 717
  },
  {
   "opcode": "REX.W + 8B /r",
   "instr": "MOV r64,r/m64",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Move r/m64 to r64.",
   "page": 717
  },
  {
   "opcode": "8C /r",
   "instr": "MOV r/m16,Sreg**",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move segment register to r/m16.",
   "page": 717
  },
  {
   "opcode": "8C /r",
   "instr": "MOV r16/r32/m16, Sreg** MR",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move zero extended 16-bit segment register to r64/m16.",
   "page": 717
  },
  {
   "opcode": "8E /r",
   "instr": "MOV Sreg,r/m16**",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move r/m16 to segment register.",
   "page": 717
  },
  {
   "opcode": "REX.W + 8E /r",
   "instr": "MOV Sreg,r/m64**",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move lower 16 bits of r/m64 to segment register.",
   "page": 717
  },
  {
   "opcode": "A0",
   "instr": "MOV AL,moffs8*",
   "op_en": "FD",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move byte at (seg:offset) to AL.",
   "page": 717
  },
  {
   "opcode": "REX.W + A0",
   "instr": "MOV AL,moffs8*",
   "op_en": "FD",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "  Move byte at (offset) to AL.",
   "page": 717
  },
  {
   "opcode": "A1",
   "instr": "MOV AX,moffs16*",
   "op_en": "FD",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move word at (seg:offset) to AX.",
   "page": 717
  },
  {
   "opcode": "A1",
   "instr": "MOV EAX,moffs32*",
   "op_en": "FD",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move doubleword at (seg:offset) to EAX.",
   "page": 717
  },
  {
   "opcode": "REX.W + A1",
   "instr": "MOV RAX,moffs64*",
   "op_en": "FD",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Move quadword at (offset) to RAX.",
   "page": 717
  },
  {
   "opcode": "A2",
   "instr": "MOV moffs8,AL",
   "op_en": "TD",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move AL to (seg:offset).",
   "page": 717
  },
  {
   "opcode": "REX.W + A2",
   "instr": "MOV moffs8***,AL",
   "op_en": "TD",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Move AL to (offset).",
   "page": 717
  },
  {
   "opcode": "A3",
   "instr": "MOV moffs16*,AX",
   "op_en": "TD",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move AX to (seg:offset).",
   "page": 717
  },
  {
   "opcode": "A3",
   "instr": "MOV moffs32*,EAX",
   "op_en": "TD",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move EAX to (seg:offset).",
   "page": 717
  },
  {
   "opcode": "REX.W + A3",
   "instr": "MOV moffs64*,RAX",
   "op_en": "TD",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Move RAX to (offset).B0+ rb ibMOV r8, imm8OIValidValidMove imm8 to r8.",
   "page": 717
  },
  {
   "opcode": "REX + B0+ rb ib",
   "instr": "MOV r8***, imm8",
   "op_en": "OI",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Move imm8 to r8.B8+ rw iwMOV r16, imm16OIValidValidMove imm16 to r16.B8+ rd idMOV r32, imm32OIValidValidMove imm32 to r32.",
   "page": 717
  },
  {
   "opcode": "REX.W + B8+ rd io",
   "instr": "MOV r64, imm64",
   "op_en": "OI",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Move imm64 to r64.",
   "page": 717
  },
  {
   "opcode": "C6 /0 ib",
   "instr": "MOV r/m8, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move imm8 to r/m8.",
   "page": 717
  },
  {
   "opcode": "REX + C6 /0 ib",
   "instr": "MOV r/m8***, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Move imm8 to r/m8.",
   "page": 717
  },
  {
   "opcode": "C7 /0 iw",
   "instr": "MOV r/m16, imm16",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move imm16 to r/m16.",
   "page": 717
  },
  {
   "opcode": "C7 /0 id",
   "instr": "MOV r/m32, imm32",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move imm32 to r/m32.",
   "page": 717
  },
  {
   "opcode": "REX.W + C7 /0 id",
   "instr": "MOV r/m64, imm32",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Move imm32 sign extended to 64-bits to r/m64.MOV—MoveVol. 2B 4-35<hr/>",
   "page": 717
  },
  {
   "opcode": "F2 0F D6 /r",
   "instr": "MOVDQ2Q mm, xmm",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move low quadword from xmm to mmx register.",
   "page": 762
  },
  {
   "opcode": "NP 0F E7 /r",
   "instr": "MOVNTQ m64, mm",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move quadword from mm to m64 using non-temporal hint.",
   "page": 789
  },
  {
   "opcode": "0F B6 /r",
   "instr": "MOVZX r16, r/m8",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move byte to word with zero-extension.",
   "page": 822
  },
  {
   "opcode": "0F B6 /r",
   "instr": "MOVZX r32, r/m8",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move byte to doubleword, zero-extension.",
   "page": 822
  },
  {
   "opcode": "REX.W + 0F B6 /r",
   "instr": "MOVZX r64, r/m8*",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Move byte to quadword, zero-extension.",
   "page": 822
  },
  {
   "opcode": "0F B7 /r",
   "instr": "MOVZX r32, r/m16",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move word to doubleword, zero-extension.",
   "page": 822
  },
  {
   "opcode": "REX.W + 0F B7 /r",
   "instr": "MOVZX r64, r/m16",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Move word to quadword, zero-extension.NOTES:* In 64-bit mode, r/m8 can not be encoded to access the following byte registers if the REX prefix is used: AH, BH, CH, DH. ",
   "page": 822
  },
  {
   "opcode": "F6 /4",
   "instr": "MUL r/m8",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Unsigned multiply (AX := AL ∗ r/m8).",
   "page": 832
  },
  {
   "opcode": "REX + F6 /4",
   "instr": "MUL r/m8*",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Unsigned multiply (AX := AL ∗ r/m8).",
   "page": 832
  },
  {
   "opcode": "F7 /4",
   "instr": "MUL r/m16",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Unsigned multiply (DX:AX := AX ∗ r/m16).",
   "page": 832
  },
  {
   "opcode": "F7 /4",
   "instr": "MUL r/m32",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Unsigned multiply (EDX:EAX := EAX ∗ r/m32).",
   "page": 832
  },
  {
   "opcode": "REX.W + F7 /4",
   "instr": "MUL r/m64",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Unsigned multiply (RDX:RAX := RAX ∗ r/m64).NOTES:* In 64-bit mode, r/m8 can not be encoded to access the following byte registers if a REX prefix is used: AH, BH, CH, DH. ",
   "page": 832
  },
  {
   "opcode": "0F 01 C9",
   "instr": "MWAIT",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "A hint that allows the processor to stop instruction execution and enter an implementation-dependent optimized state until occurrence of a class of events.",
   "page": 846
  },
  {
   "opcode": "F6 /3",
   "instr": "NEG r/m8",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Two's complement negate r/m8.",
   "page": 849
  },
  {
   "opcode": "REX + F6 /3",
   "instr": "NEG r/m8*",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Two's complement negate r/m8.",
   "page": 849
  },
  {
   "opcode": "F7 /3",
   "instr": "NEG r/m16",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Two's complement negate r/m16.",
   "page": 849
  },
  {
   "opcode": "F7 /3",
   "instr": "NEG r/m32",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Two's complement negate r/m32.",
   "page": 849
  },
  {
   "opcode": "REX.W + F7 /3",
   "instr": "NEG r/m64",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Two's complement negate r/m64.NOTES:* In 64-bit mode, r/m8 can not be encoded to access the following byte registers if a REX prefix is used: AH, BH, CH, DH. ",
   "page": 849
  },
  {
   "opcode": "NP 90",
   "instr": "NOP",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "One byte no-operation instruction.",
   "page": 851
  },
  {
   "opcode": "NP 0F 1F /0",
   "instr": "NOP r/m16",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Multi-byte no-operation instruction.",
   "page": 851
  },
  {
   "opcode": "NP 0F 1F /0",
   "instr": "NOP r/m32",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Multi-byte no-operation instruction.",
   "page": 851
  },
  {
   "opcode": "0C ib",
   "instr": "OR AL, imm8",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "   AL OR imm8.",
   "page": 854
  },
  {
   "opcode": "0D iw",
   "instr": "OR AX, imm16",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "   AX OR imm16.",
   "page": 854
  },
  {
   "opcode": "0D id",
   "instr": "OR EAX, imm32",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "   EAX OR imm32.",
   "page": 854
  },
  {
   "opcode": "REX.W + 0D id",
   "instr": "OR RAX, imm32",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "   RAX OR imm32 (sign-extended).",
   "page": 854
  },
  {
   "opcode": "80 /1 ib",
   "instr": "OR r/m8, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "r/m8 OR imm8.",
   "page": 854
  },
  {
   "opcode": "REX + 80 /1 ib",
   "instr": "OR r/m8*, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "r/m8 OR imm8.",
   "page": 854
  },
  {
   "opcode": "81 /1 iw",
   "instr": "OR r/m16, imm16",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": " r/m16 OR imm16.",
   "page": 854
  },
  {
   "opcode": "81 /1 id",
   "instr": "OR r/m32, imm32",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": " r/m32 OR imm32.",
   "page": 854
  },
  {
   "opcode": "REX.W + 81 /1 id",
   "instr": "OR r/m64, imm32",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": " r/m64 OR imm32 (sign-extended).",
   "page": 854
  },
  {
   "opcode": "83 /1 ib",
   "instr": "OR r/m16, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "r/m16 OR imm8 (sign-extended).",
   "page": 854
  },
  {
   "opcode": "83 /1 ib",
   "instr": "OR r/m32, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "r/m32 OR imm8 (sign-extended).",
   "page": 854
  },
  {
   "opcode": "REX.W + 83 /1 ib",
   "instr": "OR r/m64, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "r/m64 OR imm8 (sign-extended).",
   "page": 854
  },
  {
   "opcode": "08 /r",
   "instr": "OR r/m8, r8",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "r/m8 OR r8.",
   "page": 854
  },
  {
   "opcode": "REX + 08 /r",
   "instr": "OR r/m8*, r8*",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "r/m8 OR r8.",
   "page": 854
  },
  {
   "opcode": "09 /r",
   "instr": "OR r/m16, r16",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "r/m16 OR r16.",
   "page": 854
  },
  {
   "opcode": "09 /r",
   "instr": "OR r/m32, r32",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "r/m32 OR r32.",
   "page": 854
  },
  {
   "opcode": "REX.W + 09 /r",
   "instr": "OR r/m64, r64",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "r/m64 OR r64.",
   "page": 854
  },
  {
   "opcode": "0A /r",
   "instr": "OR r8, r/m8",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "r8 OR r/m8.",
   "page": 854
  },
  {
   "opcode": "REX + 0A /r",
   "instr": "OR r8*, r/m8*",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "r8 OR r/m8.",
   "page": 854
  },
  {
   "opcode": "0B /r",
   "instr": "OR r16, r/m16",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "r16 OR r/m16.",
   "page": 854
  },
  {
   "opcode": "0B /r",
   "instr": "OR r32, r/m32",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "r32 OR r/m32.",
   "page": 854
  },
  {
   "opcode": "REX.W + 0B /r",
   "instr": "OR r64, r/m64",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "r64 OR r/m64.NOTES:* In 64-bit mode, r/m8 can not be encoded to access the following byte registers if a REX prefix is used: AH, BH, CH, DH. ",
   "page": 854
  },
  {
   "opcode": "F3 90",
   "instr": "PAUSE",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid ",
   "description": "Gives hint to processor that improves performance of spin-wait loops.",
   "page": 917
  },
  {
   "opcode": "8F /0",
   "instr": "POP r/m16",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Pop top of stack into m16; increment stack pointer.",
   "page": 1072
  },
  {
   "opcode": "8F /0",
   "instr": "POP r/m32",
   "op_en": "M",
   "valid_in_64": "N.E.",
   "compat_legacy": "Valid",
   "description": "Pop top of stack into m32; increment stack pointer.",
   "page": 1072
  },
  {
   "opcode": "8F /0",
   "instr": "POP r/m64",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Pop top of stack into m64; increment stack pointer. Cannot encode 32-bit operand size.58+ rwPOP r16OValidValidPop top of stack into r16; increment stack pointer.58+ rdPOP r32ON.E.ValidPop top of stack into r32; increment stack pointer.58+ rdPOP r64OValidN.E.Pop top of stack into r64; increment stack pointer. Cannot encode 32-bit operand size.",
   "page": 1072
  },
  {
   "opcode": "1F",
   "instr": "POP DS",
   "op_en": "ZO",
   "valid_in_64": "Invalid",
   "compat_legacy": "Valid",
   "description": "Pop top of stack into DS; increment stack pointer.",
   "page": 1072
  },
  {
   "opcode": "07",
   "instr": "POP ES",
   "op_en": "ZO",
   "valid_in_64": "Invalid",
   "compat_legacy": "Valid",
   "description": "Pop top of stack into ES; increment stack pointer.",
   "page": 1072
  },
  {
   "opcode": "17",
   "instr": "POP SS",
   "op_en": "ZO",
   "valid_in_64": "Invalid",
   "compat_legacy": "Valid",
   "description": "Pop top of stack into SS; increment stack pointer.",
   "page": 1072
  },
  {
   "opcode": "0F A1",
   "instr": "POP FS ",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Pop top of stack into FS; increment stack pointer by 16 bits. ",
   "page": 1072
  },
  {
   "opcode": "0F A1",
   "instr": "POP FS ",
   "op_en": "ZO",
   "valid_in_64": "N.E.",
   "compat_legacy": "Valid",
   "description": "Pop top of stack into FS; increment stack pointer by 32 bits. ",
   "page": 1072
  },
  {
   "opcode": "0F A1",
   "instr": "POP FS ",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Pop top of stack into FS; increment stack pointer by 64 bits. ",
   "page": 1072
  },
  {
   "opcode": "0F A9",
   "instr": "POP GS ",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Pop top of stack into GS; increment stack pointer by 16 bits. ",
   "page": 1072
  },
  {
   "opcode": "0F A9",
   "instr": "POP GS ",
   "op_en": "ZO",
   "valid_in_64": "N.E.",
   "compat_legacy": "Valid",
   "description": "Pop top of stack into GS; increment stack pointer by 32 bits. ",
   "page": 1072
  },
  {
   "opcode": "0F A9",
   "instr": "POP GS ",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Pop top of stack into GS; increment stack pointer by 64 bits. ",
   "page": 1072
  },
  {
   "opcode": "61",
   "instr": "POPA",
   "op_en": "ZO",
   "valid_in_64": "Invalid",
   "compat_legacy": "Valid",
   "description": "Pop DI, SI, BP, BX, DX, CX, and AX.",
   "page": 1077
  },
  {
   "opcode": "61",
   "instr": "POPAD",
   "op_en": "ZO",
   "valid_in_64": "Invalid",
   "compat_legacy": "Valid",
   "description": "Pop EDI, ESI, EBP, EBX, EDX, ECX, and EAX.",
   "page": 1077
  },
  {
   "opcode": "F3 0F B8 /r",
   "instr": "POPCNT r16, r/m16",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "POPCNT on r/m16",
   "page": 1079
  },
  {
   "opcode": "F3 0F B8 /r",
   "instr": "POPCNT r32, r/m32",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "POPCNT on r/m32",
   "page": 1079
  },
  {
   "opcode": "F3 REX.W 0F B8 /r",
   "instr": "POPCNT r64, r/m64",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "POPCNT on r/m64",
   "page": 1079
  },
  {
   "opcode": "9D",
   "instr": "POPF",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Pop top of stack into lower 16 bits of EFLAGS.",
   "page": 1081
  },
  {
   "opcode": "9D",
   "instr": "POPFD",
   "op_en": "ZO",
   "valid_in_64": "N.E.",
   "compat_legacy": "Valid",
   "description": "Pop top of stack into EFLAGS.",
   "page": 1081
  },
  {
   "opcode": "9D",
   "instr": "POPFQ",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Pop top of stack and zero-extend into RFLAGS. ",
   "page": 1081
  },
  {
   "opcode": "0F 18 /1",
   "instr": "PREFETCHT0 m8",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "M  ove d  ata f  rom m8 closer to the processor using T0 hint.",
   "page": 1088
  },
  {
   "opcode": "0F 18 /2",
   "instr": "PREFETCHT1 m8",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "M  ove d  ata f  rom m8 closer to the processor using T1 hint.",
   "page": 1088
  },
  {
   "opcode": "0F 18 /3",
   "instr": "PREFETCHT2 m8",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "M  ove d  ata f  rom m8 closer to the processor using T2 hint.",
   "page": 1088
  },
  {
   "opcode": "0F 18 /0",
   "instr": "PREFETCHNTA m8",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "M  ove d  ata f  rom m8 closer to the processor using NTA hint.",
   "page": 1088
  },
  {
   "opcode": "60",
   "instr": "PUSHA",
   "op_en": "ZO",
   "valid_in_64": "Invalid",
   "compat_legacy": "Valid",
   "description": "Push AX, CX, DX, BX, original SP, BP, SI, and DI.",
   "page": 1198
  },
  {
   "opcode": "60",
   "instr": "PUSHAD",
   "op_en": "ZO",
   "valid_in_64": "Invalid",
   "compat_legacy": "Valid",
   "description": "Push EAX, ECX, EDX, EBX, original ESP, EBP, ESI, and EDI.",
   "page": 1198
  },
  {
   "opcode": "F3 6C",
   "instr": "REP INS m8, DX",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Input (E)CX bytes from port DX into ES:[(E)DI].",
   "page": 1233
  },
  {
   "opcode": "F3 6C",
   "instr": "REP INS m8, DX",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Input RCX bytes from port DX into [RDI].",
   "page": 1233
  },
  {
   "opcode": "F3 6D",
   "instr": "REP INS m16, DX",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Input (E)CX words from port DX into ES:[(E)DI.]",
   "page": 1233
  },
  {
   "opcode": "F3 6D",
   "instr": "REP INS m32, DX",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Input (E)CX doublewords from port DX into ES:[(E)DI].",
   "page": 1233
  },
  {
   "opcode": "F3 6D",
   "instr": "REP INS r/m32, DX",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Input RCX default size from port DX into [RDI].",
   "page": 1233
  },
  {
   "opcode": "F3 A4",
   "instr": "REP MOVS m8, m8",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move (E)CX bytes from DS:[(E)SI] to ES:[(E)DI].",
   "page": 1233
  },
  {
   "opcode": "F3 REX.W A4",
   "instr": "REP MOVS m8, m8",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Move RCX bytes from [RSI] to [RDI].",
   "page": 1233
  },
  {
   "opcode": "F3 A5",
   "instr": "REP MOVS m16, m16",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move (E)CX words from DS:[(E)SI] to ES:[(E)DI].",
   "page": 1233
  },
  {
   "opcode": "F3 A5",
   "instr": "REP MOVS m32, m32",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Move (E)CX doublewords from DS:[(E)SI] to ES:[(E)DI].",
   "page": 1233
  },
  {
   "opcode": "F3 REX.W A5",
   "instr": "REP MOVS m64, m64",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Move RCX quadwords from [RSI] to [RDI].",
   "page": 1233
  },
  {
   "opcode": "F3 6E",
   "instr": "REP OUTS DX, r/m8",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Output (E)CX bytes from DS:[(E)SI] to port DX.",
   "page": 1233
  },
  {
   "opcode": "F3 REX.W 6E",
   "instr": "REP OUTS DX, r/m8*",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Output RCX bytes from [RSI] to port DX.",
   "page": 1233
  },
  {
   "opcode": "F3 6F",
   "instr": "REP OUTS DX, r/m16",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Output (E)CX words from DS:[(E)SI] to port DX.",
   "page": 1233
  },
  {
   "opcode": "F3 6F",
   "instr": "REP OUTS DX, r/m32",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Output (E)CX doublewords from DS:[(E)SI] to port DX.",
   "page": 1233
  },
  {
   "opcode": "F3 REX.W 6F",
   "instr": "REP OUTS DX, r/m32",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Output RCX default size from [RSI] to port DX.",
   "page": 1233
  },
  {
   "opcode": "F3 AC",
   "instr": "REP LODS AL",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Load (E)CX bytes from DS:[(E)SI] to AL.",
   "page": 1233
  },
  {
   "opcode": "F3 REX.W AC",
   "instr": "REP LODS AL",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Load RCX bytes from [RSI] to AL.",
   "page": 1233
  },
  {
   "opcode": "F3 AD",
   "instr": "REP LODS AX",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Load (E)CX words from DS:[(E)SI] to AX.",
   "page": 1233
  },
  {
   "opcode": "F3 AD",
   "instr": "REP LODS EAX",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Load (E)CX doublewords from DS:[(E)SI] to EAX.",
   "page": 1233
  },
  {
   "opcode": "F3 REX.W AD",
   "instr": "REP LODS RAX",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Load RCX quadwords from [RSI] to RAX.",
   "page": 1233
  },
  {
   "opcode": "F3 AA",
   "instr": "REP STOS m8",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Fill (E)CX bytes at ES:[(E)DI] with AL.",
   "page": 1233
  },
  {
   "opcode": "F3 REX.W AA",
   "instr": "REP STOS m8",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Fill RCX bytes at [RDI] with AL.",
   "page": 1233
  },
  {
   "opcode": "F3 AB",
   "instr": "REP STOS m16",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Fill (E)CX words at ES:[(E)DI] with AX.",
   "page": 1233
  },
  {
   "opcode": "F3 AB",
   "instr": "REP STOS m32",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Fill (E)CX doublewords at ES:[(E)DI] with EAX.",
   "page": 1233
  },
  {
   "opcode": "F3 REX.W AB",
   "instr": "REP STOS m64",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Fill RCX quadwords at [RDI] with RAX.",
   "page": 1233
  },
  {
   "opcode": "F3 A6",
   "instr": "REPE CMPS m8, m8",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Find nonmatching bytes in ES:[(E)DI] and DS:[(E)SI].",
   "page": 1233
  },
  {
   "opcode": "F3 REX.W A6",
   "instr": "REPE CMPS m8, m8",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Find non-matching bytes in [RDI] and [RSI].",
   "page": 1233
  },
  {
   "opcode": "F3 A7",
   "instr": "REPE CMPS m16, m16",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Find nonmatching words in ES:[(E)DI] and DS:[(E)SI].",
   "page": 1233
  },
  {
   "opcode": "F3 A7",
   "instr": "REPE CMPS m32, m32",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Find nonmatching doublewords in ES:[(E)DI] and DS:[(E)SI].",
   "page": 1233
  },
  {
   "opcode": "F3 REX.W A7",
   "instr": "REPE CMPS m64, m64",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Find non-matching quadwords in [RDI] and [RSI].",
   "page": 1233
  },
  {
   "opcode": "F3 AE",
   "instr": "REPE SCAS m8",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Find non-AL byte starting at ES:[(E)DI].",
   "page": 1233
  },
  {
   "opcode": "F3 REX.W AE",
   "instr": "REPE SCAS m8",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Find non-AL byte starting at [RDI].",
   "page": 1233
  },
  {
   "opcode": "F3 AF",
   "instr": "REPE SCAS m16",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Find non-AX word starting at ES:[(E)DI].",
   "page": 1233
  },
  {
   "opcode": "F3 AF",
   "instr": "REPE SCAS m32",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Find non-EAX doubleword starting at ES:[(E)DI].REP/REPE/REPZ/REPNE/REPNZ—Repeat String Operation PrefixVol. 2B 4-551<hr/>",
   "page": 1233
  },
  {
   "opcode": "1C ib",
   "instr": "SBB AL, imm8",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Subtract with borrow imm8 from AL.",
   "page": 1281
  },
  {
   "opcode": "1D iw",
   "instr": "SBB AX, imm16",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Subtract with borrow imm16 from AX.",
   "page": 1281
  },
  {
   "opcode": "1D id",
   "instr": "SBB EAX, imm32",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Subtract with borrow imm32 from EAX.",
   "page": 1281
  },
  {
   "opcode": "REX.W + 1D id",
   "instr": "SBB RAX, imm32",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Subtract with borrow sign-extended imm.32 to 64-bits from RAX.",
   "page": 1281
  },
  {
   "opcode": "80 /3 ib",
   "instr": "SBB r/m8, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Subtract with borrow imm8 from r/m8.",
   "page": 1281
  },
  {
   "opcode": "REX + 80 /3 ib",
   "instr": "SBB r/m8*, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Subtract with borrow imm8 from r/m8.",
   "page": 1281
  },
  {
   "opcode": "81 /3 iw",
   "instr": "SBB r/m16, imm16",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Subtract with borrow imm16 from r/m16.",
   "page": 1281
  },
  {
   "opcode": "81 /3 id",
   "instr": "SBB r/m32, imm32",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Subtract with borrow imm32 from r/m32.",
   "page": 1281
  },
  {
   "opcode": "REX.W + 81 /3 id",
   "instr": "SBB r/m64, imm32",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Subtract with borrow sign-extended imm32 to 64-bits from r/m64.",
   "page": 1281
  },
  {
   "opcode": "83 /3 ib",
   "instr": "SBB r/m16, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Subtract with borrow sign-extended imm8 from r/m16.",
   "page": 1281
  },
  {
   "opcode": "83 /3 ib",
   "instr": "SBB r/m32, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Subtract with borrow sign-extended imm8 from r/m32.",
   "page": 1281
  },
  {
   "opcode": "REX.W + 83 /3 ib",
   "instr": "SBB r/m64, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Subtract with borrow sign-extended imm8 from r/m64.",
   "page": 1281
  },
  {
   "opcode": "18 /r",
   "instr": "SBB r/m8, r8",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Subtract with borrow r8 from r/m8.",
   "page": 1281
  },
  {
   "opcode": "REX + 18 /r",
   "instr": "SBB r/m8*, r8",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Subtract with borrow r8 from r/m8.",
   "page": 1281
  },
  {
   "opcode": "19 /r",
   "instr": "SBB r/m16, r16",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Subtract with borrow r16 from r/m16.",
   "page": 1281
  },
  {
   "opcode": "19 /r",
   "instr": "SBB r/m32, r32",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Subtract with borrow r32 from r/m32.",
   "page": 1281
  },
  {
   "opcode": "REX.W + 19 /r",
   "instr": "SBB r/m64, r64",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Subtract with borrow r64 from r/m64.",
   "page": 1281
  },
  {
   "opcode": "1A /r",
   "instr": "SBB r8, r/m8",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Subtract with borrow r/m8 from r8.",
   "page": 1281
  },
  {
   "opcode": "REX + 1A /r",
   "instr": "SBB r8*, r/m8*",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Subtract with borrow r/m8 from r8.",
   "page": 1281
  },
  {
   "opcode": "1B /r",
   "instr": "SBB r16, r/m16",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Subtract with borrow r/m16 from r16.",
   "page": 1281
  },
  {
   "opcode": "1B /r",
   "instr": "SBB r32, r/m32",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Subtract with borrow r/m32 from r32.",
   "page": 1281
  },
  {
   "opcode": "REX.W + 1B /r",
   "instr": "SBB r64, r/m64",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Subtract with borrow r/m64 from r64.NOTES:*  In 64-bit mode, r/m8 can not be encoded to access the following byte registers if a REX prefix is used: AH, BH, CH, DH. ",
   "page": 1281
  },
  {
   "opcode": "AE",
   "instr": "SCAS m8",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Compare AL with byte at ES:(E)DI or RDI, then set status flags.*",
   "page": 1284
  },
  {
   "opcode": "AF",
   "instr": "SCAS m16",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Compare AX with word at ES:(E)DI or RDI, then set status flags.*",
   "page": 1284
  },
  {
   "opcode": "AF",
   "instr": "SCAS m32",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Compare EAX with doubleword at ES(E)DI or RDI then set status flags.*",
   "page": 1284
  },
  {
   "opcode": "REX.W + AF",
   "instr": "SCAS m64",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Compare RAX with quadword at RDI or EDI then set status flags.",
   "page": 1284
  },
  {
   "opcode": "AE",
   "instr": "SCASB",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Compare AL with byte at ES:(E)DI or RDI then set status flags.*",
   "page": 1284
  },
  {
   "opcode": "AF",
   "instr": "SCASW",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Compare AX with word at ES:(E)DI or RDI then set status flags.*",
   "page": 1284
  },
  {
   "opcode": "AF",
   "instr": "SCASD",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Compare EAX with doubleword at ES:(E)DI or RDI then set status flags.*",
   "page": 1284
  },
  {
   "opcode": "REX.W + AF",
   "instr": "SCASQ",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Compare RAX with quadword at RDI or EDI then set status flags.NOTES:* In 64-bit mode, only 64-bit (RDI) and 32-bit (EDI) address sizes are supported. In non-64-bit mode, only 32-bit (EDI) and 16-bit (DI) address sizes are supported.",
   "page": 1284
  },
  {
   "opcode": "0F 97",
   "instr": "SETA r/m8",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Set byte if above (CF=0 and ZF=0).",
   "page": 1288
  },
  {
   "opcode": "REX + 0F 97",
   "instr": "SETA r/m8*",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Set byte if above (CF=0 and ZF=0).",
   "page": 1288
  },
  {
   "opcode": "0F 93",
   "instr": "SETAE r/m8",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Set byte if above or equal (CF=0).",
   "page": 1288
  },
  {
   "opcode": "REX + 0F 93",
   "instr": "SETAE r/m8*",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Set byte if above or equal (CF=0).",
   "page": 1288
  },
  {
   "opcode": "0F 92",
   "instr": "SETB r/m8",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Set byte if below (CF=1).",
   "page": 1288
  },
  {
   "opcode": "REX + 0F 92",
   "instr": "SETB r/m8*",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Set byte if below (CF=1).",
   "page": 1288
  },
  {
   "opcode": "0F 96",
   "instr": "SETBE r/m8",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Set byte if below or equal (CF=1 or ZF=1).",
   "page": 1288
  },
  {
   "opcode": "REX + 0F 96",
   "instr": "SETBE r/m8*",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Set byte if below or equal (CF=1 or ZF=1).",
   "page": 1288
  },
  {
   "opcode": "0F 92",
   "instr": "SETC r/m8",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Set byte if carry (CF=1).",
   "page": 1288
  },
  {
   "opcode": "REX + 0F 92",
   "instr": "SETC r/m8*",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Set byte if carry (CF=1).",
   "page": 1288
  },
  {
   "opcode": "0F 94",
   "instr": "SETE r/m8",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Set byte if equal (ZF=1).",
   "page": 1288
  },
  {
   "opcode": "REX + 0F 94",
   "instr": "SETE r/m8*",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Set byte if equal (ZF=1).",
   "page": 1288
  },
  {
   "opcode": "0F 9F",
   "instr": "SETG r/m8",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Set byte if greater (ZF=0 and SF=OF).",
   "page": 1288
  },
  {
   "opcode": "REX + 0F 9F",
   "instr": "SETG r/m8*",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Set byte if greater (ZF=0 and SF=OF).",
   "page": 1288
  },
  {
   "opcode": "0F 9D",
   "instr": "SETGE r/m8",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Set byte if greater or equal (SF=OF).",
   "page": 1288
  },
  {
   "opcode": "REX + 0F 9D",
   "instr": "SETGE r/m8*",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Set byte if greater or equal (SF=OF).",
   "page": 1288
  },
  {
   "opcode": "0F 9C",
   "instr": "SETL r/m8",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Set byte if less (SF≠ OF).",
   "page": 1288
  },
  {
   "opcode": "REX + 0F 9C",
   "instr": "SETL r/m8*",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Set byte if less (SF≠ OF).",
   "page": 1288
  },
  {
   "opcode": "0F 9E",
   "instr": "SETLE r/m8",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Set byte if less or equal (ZF=1 or SF≠ OF).",
   "page": 1288
  },
  {
   "opcode": "REX + 0F 9E",
   "instr": "SETLE r/m8*",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Set byte if less or equal (ZF=1 or SF≠ OF).",
   "page": 1288
  },
  {
   "opcode": "0F 96",
   "instr": "SETNA r/m8",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Set byte if not above (CF=1 or ZF=1).",
   "page": 1288
  },
  {
   "opcode": "REX + 0F 96",
   "instr": "SETNA r/m8*",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Set byte if not above (CF=1 or ZF=1).",
   "page": 1288
  },
  {
   "opcode": "0F 92",
   "instr": "SETNAE r/m8",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Set byte if not above or equal (CF=1).",
   "page": 1288
  },
  {
   "opcode": "REX + 0F 92",
   "instr": "SETNAE r/m8*",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Set byte if not above or equal (CF=1).",
   "page": 1288
  },
  {
   "opcode": "0F 93",
   "instr": "SETNB r/m8",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Set byte if not below (CF=0).",
   "page": 1288
  },
  {
   "opcode": "REX + 0F 93",
   "instr": "SETNB r/m8*",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Set byte if not below (CF=0).",
   "page": 1288
  },
  {
   "opcode": "0F 97",
   "instr": "SETNBE r/m8",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Set byte if not below or equal (CF=0 and ZF=0).",
   "page": 1288
  },
  {
   "opcode": "REX + 0F 97",
   "instr": "SETNBE r/m8*",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Set byte if not below or equal (CF=0 and ZF=0).",
   "page": 1288
  },
  {
   "opcode": "0F 93",
   "instr": "SETNC r/m8",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Set byte if not carry (CF=0).",
   "page": 1288
  },
  {
   "opcode": "REX + 0F 93",
   "instr": "SETNC r/m8*",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Set byte if not carry (CF=0).",
   "page": 1288
  },
  {
   "opcode": "0F 95",
   "instr": "SETNE r/m8",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Set byte if not equal (ZF=0).",
   "page": 1288
  },
  {
   "opcode": "REX + 0F 95",
   "instr": "SETNE r/m8*",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Set byte if not equal (ZF=0).",
   "page": 1288
  },
  {
   "opcode": "0F 9E",
   "instr": "SETNG r/m8",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Set byte if not greater (ZF=1 or SF≠ OF)",
   "page": 1288
  },
  {
   "opcode": "REX + 0F 9E",
   "instr": "SETNG r/m8*",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Set byte if not greater (ZF=1 or SF≠ OF).",
   "page": 1288
  },
  {
   "opcode": "0F 9C",
   "instr": "SETNGE r/m8",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Set byte if not greater or equal (SF≠ OF).",
   "page": 1288
  },
  {
   "opcode": "REX + 0F 9C",
   "instr": "SETNGE r/m8*",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Set byte if not greater or equal (SF≠ OF).",
   "page": 1288
  },
  {
   "opcode": "0F 9D",
   "instr": "SETNL r/m8",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Set byte if not less (SF=OF).",
   "page": 1288
  },
  {
   "opcode": "REX + 0F 9D",
   "instr": "SETNL r/m8*",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Set byte if not less (SF=OF).",
   "page": 1288
  },
  {
   "opcode": "0F 9F",
   "instr": "SETNLE r/m8",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Set byte if not less or equal (ZF=0 and SF=OF).4-606 Vol. 2BSETcc—Set Byte on Condition<hr/>",
   "page": 1288
  },
  {
   "opcode": "F9",
   "instr": "STC",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Set CF flag.",
   "page": 1337
  },
  {
   "opcode": "FD",
   "instr": "STD",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Set DF flag.",
   "page": 1338
  },
  {
   "opcode": "FB",
   "instr": "STI",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Set interrupt flag; external, maskable interrupts enabled at the end of the next instruction.",
   "page": 1339
  },
  {
   "opcode": "AA",
   "instr": "STOS m8",
   "op_en": "NA",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "For legacy mode, store AL at address ES:(E)DI; For 64-bit mode store AL at address RDI or EDI.",
   "page": 1342
  },
  {
   "opcode": "AB",
   "instr": "STOS m16",
   "op_en": "NA",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "For legacy mode, store AX at address ES:(E)DI; For 64-bit mode store AX at address RDI or EDI.",
   "page": 1342
  },
  {
   "opcode": "AB",
   "instr": "STOS m32",
   "op_en": "NA",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "For legacy mode, store EAX at address ES:(E)DI; For 64-bit mode store EAX at address RDI or EDI.",
   "page": 1342
  },
  {
   "opcode": "REX.W + AB",
   "instr": "STOS m64",
   "op_en": "NA",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Store RAX at address RDI or EDI.",
   "page": 1342
  },
  {
   "opcode": "AA",
   "instr": "STOSB",
   "op_en": "NA",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "For legacy mode, store AL at address ES:(E)DI; For 64-bit mode store AL at address RDI or EDI.",
   "page": 1342
  },
  {
   "opcode": "AB",
   "instr": "STOSW",
   "op_en": "NA",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "For legacy mode, store AX at address ES:(E)DI; For 64-bit mode store AX at address RDI or EDI.",
   "page": 1342
  },
  {
   "opcode": "AB",
   "instr": "STOSD",
   "op_en": "NA",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "For legacy mode, store EAX at address ES:(E)DI; For 64-bit mode store EAX at address RDI or EDI.",
   "page": 1342
  },
  {
   "opcode": "REX.W + AB",
   "instr": "STOSQ",
   "op_en": "NA",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Store RAX at address RDI or EDI.",
   "page": 1342
  },
  {
   "opcode": "0F 00 /1",
   "instr": "STR r/m16",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Stores segment selector from TR in r/m16.",
   "page": 1346
  },
  {
   "opcode": "2C ib",
   "instr": "SUB AL, imm8",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Subtract imm8 from AL.",
   "page": 1348
  },
  {
   "opcode": "2D iw",
   "instr": "SUB AX, imm16",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Subtract imm16 from AX.",
   "page": 1348
  },
  {
   "opcode": "2D id",
   "instr": "SUB EAX, imm32",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Subtract imm32 from EAX.",
   "page": 1348
  },
  {
   "opcode": "REX.W + 2D id",
   "instr": "SUB RAX, imm32",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Subtract imm32 sign-extended to 64-bits from RAX.",
   "page": 1348
  },
  {
   "opcode": "80 /5 ib",
   "instr": "SUB r/m8, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Subtract imm8 from r/m8.",
   "page": 1348
  },
  {
   "opcode": "REX + 80 /5 ib",
   "instr": "SUB r/m8*, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Subtract imm8 from r/m8.",
   "page": 1348
  },
  {
   "opcode": "81 /5 iw",
   "instr": "SUB r/m16, imm16",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Subtract imm16 from r/m16.",
   "page": 1348
  },
  {
   "opcode": "81 /5 id",
   "instr": "SUB r/m32, imm32",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Subtract imm32 from r/m32.",
   "page": 1348
  },
  {
   "opcode": "REX.W + 81 /5 id",
   "instr": "SUB r/m64, imm32",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Subtract imm32 sign-extended to 64-bits from r/m64.",
   "page": 1348
  },
  {
   "opcode": "83 /5 ib",
   "instr": "SUB r/m16, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Subtract sign-extended imm8 from r/m16.",
   "page": 1348
  },
  {
   "opcode": "83 /5 ib",
   "instr": "SUB r/m32, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Subtract sign-extended imm8 from r/m32.",
   "page": 1348
  },
  {
   "opcode": "REX.W + 83 /5 ib",
   "instr": "SUB r/m64, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Subtract sign-extended imm8 from r/m64.",
   "page": 1348
  },
  {
   "opcode": "28 /r",
   "instr": "SUB r/m8, r8",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Subtract r8 from r/m8.",
   "page": 1348
  },
  {
   "opcode": "REX + 28 /r",
   "instr": "SUB r/m8*, r8*",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Subtract r8 from r/m8.",
   "page": 1348
  },
  {
   "opcode": "29 /r",
   "instr": "SUB r/m16, r16",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Subtract r16 from r/m16.",
   "page": 1348
  },
  {
   "opcode": "29 /r",
   "instr": "SUB r/m32, r32",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Subtract r32 from r/m32.",
   "page": 1348
  },
  {
   "opcode": "REX.W + 29 /r",
   "instr": "SUB r/m64, r64",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Subtract r64 from r/m64.",
   "page": 1348
  },
  {
   "opcode": "2A /r",
   "instr": "SUB r8, r/m8",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Subtract r/m8 from r8.",
   "page": 1348
  },
  {
   "opcode": "REX + 2A /r",
   "instr": "SUB r8*, r/m8*",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Subtract r/m8 from r8.",
   "page": 1348
  },
  {
   "opcode": "2B /r",
   "instr": "SUB r16, r/m16",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Subtract r/m16 from r16.",
   "page": 1348
  },
  {
   "opcode": "2B /r",
   "instr": "SUB r32, r/m32",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Subtract r/m32 from r32.",
   "page": 1348
  },
  {
   "opcode": "REX.W + 2B /r",
   "instr": "SUB r64, r/m64",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Subtract r/m64 from r64.NOTES:* In 64-bit mode, r/m8 can not be encoded to access the following byte registers if a REX prefix is used: AH, BH, CH, DH. ",
   "page": 1348
  },
  {
   "opcode": "0F 01 F8",
   "instr": "SWAPGS",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Invalid",
   "description": "Exchanges the current GS base register value with the value contained in MSR address C0000102H.",
   "page": 1360
  },
  {
   "opcode": "0F 05",
   "instr": "SYSCALL",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Invalid",
   "description": "Fast call to privilege level 0 system procedures.",
   "page": 1362
  },
  {
   "opcode": "0F 34",
   "instr": "SYSENTER",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Fast call to privilege level 0 system procedures.",
   "page": 1365
  },
  {
   "opcode": "0F 35",
   "instr": "SYSEXIT",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Fast return to privilege level 3 user code.",
   "page": 1368
  },
  {
   "opcode": "REX.W + 0F 35",
   "instr": "SYSEXIT",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Fast return to 64-bit mode privilege level 3 user code.",
   "page": 1368
  },
  {
   "opcode": "0F 07",
   "instr": "SYSRET",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Invalid",
   "description": "Return to compatibility mode from fast system cal  ",
   "page": 1371
  },
  {
   "opcode": "REX.W + 0F 07",
   "instr": "SYSRET",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Invalid",
   "description": "Return to 64-bit mode from fast system cal  ",
   "page": 1371
  },
  {
   "opcode": "A8 ib",
   "instr": "TEST AL, imm8",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "AND imm8 with AL; set SF, ZF, PF according to result.",
   "page": 1374
  },
  {
   "opcode": "A9 iw",
   "instr": "TEST AX, imm16",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "AND imm16 with AX; set SF, ZF, PF according to result.",
   "page": 1374
  },
  {
   "opcode": "A9 id",
   "instr": "TEST EAX, imm32",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "AND imm32 with EAX; set SF, ZF, PF according to result.",
   "page": 1374
  },
  {
   "opcode": "REX.W + A9 id",
   "instr": "TEST RAX, imm32",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "AND imm32 sign-extended to 64-bits with RAX; set SF, ZF, PF according to result.",
   "page": 1374
  },
  {
   "opcode": "F6 /0 ib",
   "instr": "TEST r/m8, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "AND imm8 with r/m8; set SF, ZF, PF according to result.",
   "page": 1374
  },
  {
   "opcode": "REX + F6 /0 ib",
   "instr": "TEST r/m8*, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "AND imm8 with r/m8; set SF, ZF, PF according to result.",
   "page": 1374
  },
  {
   "opcode": "F7 /0 iw",
   "instr": "TEST r/m16, imm16",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "AND imm16 with r/m16; set SF, ZF, PF according to result.",
   "page": 1374
  },
  {
   "opcode": "F7 /0 id",
   "instr": "TEST r/m32, imm32",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "AND imm32 with r/m32; set SF, ZF, PF according to result.",
   "page": 1374
  },
  {
   "opcode": "REX.W + F7 /0 id",
   "instr": "TEST r/m64, imm32",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "AND imm32 sign-extended to 64-bits with r/m64; set SF, ZF, PF according to result.",
   "page": 1374
  },
  {
   "opcode": "84 /r",
   "instr": "TEST r/m8, r8",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "AND r8 with r/m8; set SF, ZF, PF according to result.",
   "page": 1374
  },
  {
   "opcode": "REX + 84 /r",
   "instr": "TEST r/m8*, r8*",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "AND r8 with r/m8; set SF, ZF, PF according to result.",
   "page": 1374
  },
  {
   "opcode": "85 /r",
   "instr": "TEST r/m16, r16",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "AND r16 with r/m16; set SF, ZF, PF according to result.",
   "page": 1374
  },
  {
   "opcode": "85 /r",
   "instr": "TEST r/m32, r32",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "AND r32 with r/m32; set SF, ZF, PF according to result.",
   "page": 1374
  },
  {
   "opcode": "REX.W + 85 /r",
   "instr": "TEST r/m64, r64",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "AND r64 with r/m64; set SF, ZF, PF according to result.NOTES:* In 64-bit mode, r/m8 can not be encoded to access the following byte registers if a REX prefix is used: AH, BH, CH, DH. ",
   "page": 1374
  },
  {
   "opcode": "0F FF /r",
   "instr": "UD01 r32, r/m32",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Raise invalid opcode exception.",
   "page": 1384
  },
  {
   "opcode": "0F B9 /r",
   "instr": "UD1 r32, r/m32",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Raise invalid opcode exception.",
   "page": 1384
  },
  {
   "opcode": "0F 0B",
   "instr": "UD2",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Raise invalid opcode exception.NOTES:1. Some older processors decode the UD0 instruction without a ModR/M byte. As a result, those processors would deliver an invalid-opcode exception instead of a fault on instruction fetch when the instruction with a ModR/M byte (and any implied bytes) would cross a page or segment boundary.",
   "page": 1384
  },
  {
   "opcode": "0F 00 /4",
   "instr": "VERR r/m16",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Set ZF=1 if segment specified with r/m16 can be read.",
   "page": 1496
  },
  {
   "opcode": "0F 00 /5",
   "instr": "VERW r/m16",
   "op_en": "M",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Set ZF=1 if segment specified with r/m16 can be written.",
   "page": 1496
  },
  {
   "opcode": "9B",
   "instr": "WAIT",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Check pending unmasked floating-point exceptions.",
   "page": 1985
  },
  {
   "opcode": "9B",
   "instr": "FWAIT",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Check pending unmasked floating-point exceptions.",
   "page": 1985
  },
  {
   "opcode": "0F 09",
   "instr": "WBINVD",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Write back and flush Internal caches; initiate writing-back and flushing of external caches.",
   "page": 1986
  },
  {
   "opcode": "0F 30",
   "instr": "WRMSR",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Write the value in EDX:EAX to MSR specified by ECX.",
   "page": 1990
  },
  {
   "opcode": "0F C0 /r",
   "instr": "XADD r/m8, r8",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Exchange r8 and r/m8; load sum into r/m8.",
   "page": 2004
  },
  {
   "opcode": "REX + 0F C0 /r",
   "instr": "XADD r/m8*, r8*",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Exchange r8 and r/m8; load sum into r/m8.",
   "page": 2004
  },
  {
   "opcode": "0F C1 /r",
   "instr": "XADD r/m16, r16",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Exchange r16 and r/m16; load sum into r/m16.",
   "page": 2004
  },
  {
   "opcode": "0F C1 /r",
   "instr": "XADD r/m32, r32",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Exchange r32 and r/m32; load sum into r/m32.",
   "page": 2004
  },
  {
   "opcode": "REX.W + 0F C1 /r",
   "instr": "XADD r/m64, r64",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Exchange r64 and r/m64; load sum into r/m64.NOTES:* In 64-bit mode, r/m8 can not be encoded to access the following byte registers if a REX prefix is used: AH, BH, CH, DH. ",
   "page": 2004
  },
  {
   "opcode": "NP 0F 01 D0",
   "instr": "XGETBV",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Reads an XCR specified by ECX into EDX:EAX.",
   "page": 2013
  },
  {
   "opcode": "D7",
   "instr": "XLAT m8",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Set AL to memory byte DS:[(E)BX + unsigned AL].",
   "page": 2015
  },
  {
   "opcode": "D7",
   "instr": "XLATB",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Set AL to memory byte DS:[(E)BX + unsigned AL].",
   "page": 2015
  },
  {
   "opcode": "REX.W + D7",
   "instr": "XLATB",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "Set AL to memory byte [RBX + unsigned AL].",
   "page": 2015
  },
  {
   "opcode": "34 ib",
   "instr": "XOR AL, imm8",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "   AL XOR imm8.",
   "page": 2017
  },
  {
   "opcode": "35 iw",
   "instr": "XOR AX, imm16",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "   AX XOR imm16.",
   "page": 2017
  },
  {
   "opcode": "35 id",
   "instr": "XOR EAX, imm32",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "EAX XOR imm32.",
   "page": 2017
  },
  {
   "opcode": "REX.W + 35 id",
   "instr": "XOR RAX, imm32",
   "op_en": "I",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "   RAX XOR imm32 (sign-extended).",
   "page": 2017
  },
  {
   "opcode": "80 /6 ib",
   "instr": "XOR r/m8, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "r/m8 XOR imm8.",
   "page": 2017
  },
  {
   "opcode": "REX + 80 /6 ib",
   "instr": "XOR r/m8*, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "r/m8 XOR imm8.",
   "page": 2017
  },
  {
   "opcode": "81 /6 iw",
   "instr": "XOR r/m16, imm16",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "r/m16 XOR imm16.",
   "page": 2017
  },
  {
   "opcode": "81 /6 id",
   "instr": "XOR r/m32, imm32",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "r/m32 XOR imm32.",
   "page": 2017
  },
  {
   "opcode": "REX.W + 81 /6 id",
   "instr": "XOR r/m64, imm32",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "r/m64 XOR imm32 (sign-extended).",
   "page": 2017
  },
  {
   "opcode": "83 /6 ib",
   "instr": "XOR r/m16, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "r/m16 XOR imm8 (sign-extended).",
   "page": 2017
  },
  {
   "opcode": "83 /6 ib",
   "instr": "XOR r/m32, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "r/m32 XOR imm8 (sign-extended).",
   "page": 2017
  },
  {
   "opcode": "REX.W + 83 /6 ib",
   "instr": "XOR r/m64, imm8",
   "op_en": "MI",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "r/m64 XOR imm8 (sign-extended).",
   "page": 2017
  },
  {
   "opcode": "30 /r",
   "instr": "XOR r/m8, r8",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "r/m8 XOR r8.",
   "page": 2017
  },
  {
   "opcode": "REX + 30 /r",
   "instr": "XOR r/m8*, r8*",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "r/m8 XOR r8.",
   "page": 2017
  },
  {
   "opcode": "31 /r",
   "instr": "XOR r/m16, r16",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "r/m16 XOR r16.",
   "page": 2017
  },
  {
   "opcode": "31 /r",
   "instr": "XOR r/m32, r32",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "r/m32 XOR r32.",
   "page": 2017
  },
  {
   "opcode": "REX.W + 31 /r",
   "instr": "XOR r/m64, r64",
   "op_en": "MR",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "r/m64 XOR r64.",
   "page": 2017
  },
  {
   "opcode": "32 /r",
   "instr": "XOR r8, r/m8",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "r8 XOR r/m8.",
   "page": 2017
  },
  {
   "opcode": "REX + 32 /r",
   "instr": "XOR r8*, r/m8*",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "r8 XOR r/m8.",
   "page": 2017
  },
  {
   "opcode": "33 /r",
   "instr": "XOR r16, r/m16",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "r16 XOR r/m16.",
   "page": 2017
  },
  {
   "opcode": "33 /r",
   "instr": "XOR r32, r/m32",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "r32 XOR r/m32.",
   "page": 2017
  },
  {
   "opcode": "REX.W + 33 /r",
   "instr": "XOR r64, r/m64",
   "op_en": "RM",
   "valid_in_64": "Valid",
   "compat_legacy": "N.E.",
   "description": "r64 XOR r/m64.NOTES:* In 64-bit mode, r/m8 can not be encoded to access the following byte registers if a REX prefix is used: AH, BH, CH, DH. ",
   "page": 2017
  },
  {
   "opcode": "NP 0F 01 D1",
   "instr": "XSETBV",
   "op_en": "ZO",
   "valid_in_64": "Valid",
   "compat_legacy": "Valid",
   "description": "Write the value in EDX:EAX to the XCR specified by ECX.",
   "page": 2046
  }
 ],
 "document_id": "325383-072US",
 "document_version": "May 2020"
}